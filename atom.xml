<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>知识涓流</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.xmidou.com/"/>
  <updated>2019-07-15T10:21:09.489Z</updated>
  <id>http://www.xmidou.com/</id>
  
  <author>
    <name>泡菜</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>URL长短变换</title>
    <link href="http://www.xmidou.com/2019/07/15/changLurlToSurl/"/>
    <id>http://www.xmidou.com/2019/07/15/changLurlToSurl/</id>
    <published>2019-07-15T03:02:51.000Z</published>
    <updated>2019-07-15T10:21:09.489Z</updated>
    
    <content type="html"><![CDATA[<h1 id="将一个长URL变成短及原理分析"><a href="#将一个长URL变成短及原理分析" class="headerlink" title="将一个长URL变成短及原理分析"></a><strong>将一个长URL变成短及原理分析</strong></h1><p>短址本质上是实现了一个映射函数 f: X - Y 。而这个映射函数必须同时具有两个特点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果 x1 != x2, 则 f (x1) != f(x2);</span><br><span class="line">同样，对于每一个 y, 也能够找到唯一的一个 x 使得 f(x) = y;</span><br></pre></td></tr></table></figure><ul><li><strong>如何将长URL生成短URL</strong></li><li><strong>短地址从URL输入到页面展现到底发生了什么？</strong></li><li><strong>短链接的设计思路</strong></li><li><strong>发号器的设计思路</strong></li></ul><h2 id="如何将长URL生成短URL"><a href="#如何将长URL生成短URL" class="headerlink" title="如何将长URL生成短URL"></a><strong>如何将长URL生成短URL</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://longlonglong.url  --&gt; http://short.url</span><br></pre></td></tr></table></figure><p>短地址在实际场景中还有一些好处：</p><ul><li>较短的网址可以放在微博的限制字数里，节约网址长度、更加方便社交化传播</li><li>规避网址中的关键词、屏蔽域名、隐藏真实地址</li><li>由于存在长短网址的映射的中间层，可以更加方便URL的管理，如暴力广告等信息的屏蔽、跟踪点击量、地域分布等数据统计及挖掘工作</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://news.sina.com.cn/gov/xlxw/2019-07-15/doc-ihytcerm3703831.shtml</span><br></pre></td></tr></table></figure><p>一个比较简单的做法就是使用百度的短地址服务 <a href="http://dwz.cn/" target="_blank" rel="noopener">http://dwz.cn/</a> ，这样就可以生成如下所示的短地址，无论访问长地址还是短地址其实都是一样的可以访问到最终的真实地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://dwz.cn/g0K4oEWD</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="1_bd.png" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">有很多提供短地址服务的平台，例如：</span><br><span class="line">- 新浪：http://sina.lt/</span><br><span class="line">- 百度：http://dwz.cn/</span><br><span class="line">- 0x3：http://0x3.me/</span><br><span class="line">- MRW：http://mrw.so/</span><br><span class="line">- 谷歌：https://goo.gl/</span><br></pre></td></tr></table></figure><h2 id="短地址从URL输入到页面展现到底发生了什么？"><a href="#短地址从URL输入到页面展现到底发生了什么？" class="headerlink" title="短地址从URL输入到页面展现到底发生了什么？"></a>短地址从URL输入到页面展现到底发生了什么？</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2_dns.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>当我们在浏览器里输入<a href="https://dwz.cn/g0K4oEWD时" target="_blank" rel="noopener">https://dwz.cn/g0K4oEWD时</a></p><ul><li>DNS首先解析获得 <a href="http://dwz.cn" target="_blank" rel="noopener">http://dwz.cn</a> 的 IP 地址</li><li>当 DNS 获得 IP 地址以后（比如：180.101.212.104），会向这个地址发送 HTTP GET 请求，查询短码 g0K4oEWD</li><li><a href="http://dwz.cn.cn" target="_blank" rel="noopener">http://dwz.cn.cn</a> 服务器会通过短码 g0K4oEWD 获取对应的长 URL</li><li>请求通过 HTTP 301 转到对应的长 URL <a href="https://news.sina.com.cn/gov/xlxw/2019-07-15/doc-ihytcerm3703831.shtml" target="_blank" rel="noopener">https://news.sina.com.cn/gov/xlxw/2019-07-15/doc-ihytcerm3703831.shtml</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">301 是永久重定向，302 是临时重定向。短地址一经生成通常就不会变化，301 是符合 http 语义的，同时对服务器压力也会有一定减少。301 redirect:：301代表永久性转移(Permanently Moved)，301重定向是网页更改地址后对搜索引擎最友好的方法，只要不是暂时搬移的情况，都建议使用301来做转址。</span><br><span class="line">302 redirect:：302代表暂时性转移(Temporarily Moved )，在前些年，不少Black Hat SEO曾广泛应用这项技术作弊。各大主要搜索引擎均加强了打击力度，像Google对BMW德国网站的惩罚。即使网站客观上不是spam，也很容易被搜寻引擎误判为spam而遭到惩罚。</span><br><span class="line">服务器坚持重定向而不是立即响应用户想要查看的网页有一些有趣的原因。一个原因与搜索引擎排名有关。请参阅，如果同一页面有两个网址，比如http://www.igoro.com/和http://igoro.com/ ，搜索引擎可能会将它们视为两个不同的网站，每个网站都有较少的传入链接和因此排名较低。搜索引擎理解永久重定向（301），并将来自两个源的传入链接组合成单个排名。此外，相同内容的多个URL不支持缓存。当一段内容具有多个名称时，它可能会在缓存中多次出现。</span><br><span class="line">**URL完整格式为：协议://用户名:密码@子域名.域名.顶级域名:端口号/目录/文件名.文件后缀?参数=值#标志**</span><br></pre></td></tr></table></figure><p>从输入URL到页面加载完成的过程比较粗的可以说经历了如下阶段：</p><ol><li>在浏览器中输入URL并确认</li><li>URL解析/DNS解析查找域名IP地址</li><li>网络连接发起HTTP请求</li><li>HTTP报文传输过程</li><li>服务器接收数据</li><li>服务器响应请求/MVC</li><li>服务器返回数据</li><li>客户端接收数据</li><li>浏览器加载/渲染页面</li><li>打印绘制输出</li></ol><p>关于DNS部分需要补充的知识如下，DNS的域名解析是递归的：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="3_findDns.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>根域名服务器是用来查顶域权威服务器用的，作为全球因特网DNS体系的固定统一入口。全球13组根域名服务器中有 10 组在美国。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="4_rootDns.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>拓展阅读：DNS层面是可以进行DNS劫持的，<strong>DNS劫持又称域名劫持，是指在劫持的网络范围内拦截域名解析的请求，分析请求的域名，把审查范围以外的请求放行，否则返回假的IP地址或者什么都不做使请求失去响应，其效果就是对特定的网络不能访问或访问的是假网址。</strong></p><p>DNS劫持(DNS钓鱼攻击)十分凶猛且不容易被用户感知，曾导致巴西最大银行巴西银行近1%客户受到攻击而导致账户被盗。黑客利用宽带路由器的缺陷对用户DNS进行篡改——用户只要浏览一下黑客所掌控的WEB页面，其宽带路由器的DNS就会被黑客篡改，因为该WEB页面设有特别的恶意代码，所以可以成功躲过安全软件检测，导致大量用户被DNS钓鱼诈骗。</p><h2 id="短链接的思路"><a href="#短链接的思路" class="headerlink" title="短链接的思路"></a>短链接的思路</h2><p>短链接的实现有些人提出了压缩算法和Hash映射等等，有人也在知乎进行了讨论（<strong>下一节会提出</strong>），其实这些的方向都错了会钻到牛角尖里。</p><p>正确的思路，是做一个<strong>发号器</strong>，通过长短链接的一一映射关系进行统一的管理。每过来一个长地址，就让发号器发一个号即可，长地址和短地址的映射关系甚至可以放在mysql。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://dwz.cn/g0K4oEWD 为例，我们再简化一下，哪怕是最简单的id自增都是简单实用的，根据长地址依次生成https://dwz.cn/0 、 https://dwz.cn/1 ......</span><br></pre></td></tr></table></figure><p>短地址的生成是一个读多写少的情况，技术上可以思考更全面一些，比如：</p><ul><li>生成短链接以前使用Bloom Filter判断是否存在冲突</li><li>对总链接数做好监控，防止地址太多超过上限</li><li>防攻击做好，防止耗尽链接池初始资源</li><li>一些统计的加强</li></ul><p>发号器的实现最核心的方式之一是<strong>多进制</strong>的使用。</p><p>我们上篇文章介绍的UUID，以及之前介绍过的Snowflake雪花算法，还有百度开源的基于Snowflake的Uidgenerator、美团开源的leaf都是发号器。</p><p>目前业界使用Apache亮哥的sharding-jdbc，一般都会采取其内置的Snowflake算法，关于二次改造我这里列举一个58沈剑在《架构师之路》系列中提出的例子。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="5_launchar.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="发号器的设计思路"><a href="#发号器的设计思路" class="headerlink" title="发号器的设计思路"></a>发号器的设计思路</h2><p>在设计发号器之初，必须要做的是评估发号器的容量。</p><p>这是一种设置 id 自增，一个 10进制 id 对应一个 62进制的数值，1对1，也就不会出现重复的情况。这个利用的就是低进制转化为高进制时，字符数会减少的特性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">进制转换工具 http://tool.lu/hexconvert/</span><br></pre></td></tr></table></figure><p>以新浪微博微为例，如果新浪微博日活用户量是1亿，如果每个人每天发0.1条带URL的新浪微博，那么转换为短地址我们要考虑总量和读写的压力，微博场景下是读多写少的。</p><p>对于写来说，每天产生一千万微博数量，那么每年大概是0.1亿*365=36.5亿，如果采用based62上生成6位， 短址的长度一般设为 6 位，而每一位是由 [a - z, A - Z, 0 - 9] 总共 62 个字母组成的，所以 6 位的话，总共会有 62^6 ~= 568亿种组合，够用15年。在google URL shortener 服务中，短址长度为 5，大概有9亿多种组合。</p><p>如果按照秒来算的话，一天86400秒，每天写的平均QPS大概在 0.1亿 /86400秒=115QPS，我们可以把峰值设置为500QPS。所以500QPS就是发号器设置的QPS写峰值，也是这个系统设计之初需要达到的QPS。</p><p>对于读来说，读比写要多，比如一亿人一天只有十分之一的人发微博，但是每个人都会点击10条别人的微博。点击这个URL的峰值我们可以初步计算为 1亿*10/86400 = 11万5000 QPS。这么大的QPS最好使用分布式缓存Redis去存储。</p><p>对于存储来说，如果一个URL是100bytes（字节），那么每天产生一千万的微博总量是 100bytes <em> 1千万 / 1024/1024/1024 = 0.93G，每年产生0.93G</em>365=339G=0.3T。所以准备1T的硬盘，没有特殊情况，可以用3年。</p><p>在stackoverflow上也有老外提出了自增序列算法的解答（ <a href="https://stackoverflow.com/questions/742013/how-do-i-create-a-url-shortener" target="_blank" rel="noopener">https://stackoverflow.com/questions/742013/how-do-i-create-a-url-shortener</a> ）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="6_launchar2.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>于每一个长地址，我们可以根据它的ID，得到一个6位的 62 进制数，这个6位的 62 进制数就是我们的短址:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  public ArrayList&lt;Integer&gt; base62(int id) &#123;</span><br><span class="line">ArrayList&lt;Integer&gt; value = new ArrayList&lt;Integer&gt;();</span><br><span class="line">while (id &gt; 0) &#123;</span><br><span class="line">int remainder = id % 62;</span><br><span class="line">value.add(remainder);</span><br><span class="line">id = id / 62;</span><br><span class="line">&#125;</span><br><span class="line">return value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举个例子，对于 ID = 138，通过 base62(138), 我们得到 value = [14, 2]。根据上面的对应规则表，我们可以得到其对应的短址为：aaaabn</p><p>通过短址找到所对应的长地址，方法也很简单，就是把62进制数转成10进制数即可，这样我们就可以得到长地址的ID了。</p><p>How to resolve a shortened URL to the initial ID</p><p>The reverse is even easier.You just do a reverse lookup in your alphabet.</p><p>1、e9a~62~ will be resolved to “4th,61st,and 0th letter in the alphabet”.<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="7.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br>        2、Now find your database-record with WHERE id = 19158</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  public static int base10(ArrayList&lt;Integer&gt; base62) &#123;</span><br><span class="line">    //make sure the size of base62 is 6</span><br><span class="line">    for (int i = 1; i &lt;= 6 - base62.size(); i++) &#123;</span><br><span class="line">        base62.add(0, 0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">int id = 0;</span><br><span class="line">int size = base62.size();</span><br><span class="line">for (int i = 0; i &lt; size; i++) &#123;</span><br><span class="line">int value = base62.get(i);</span><br><span class="line">id += (int) (value * Math.pow(62, size - i - 1));</span><br><span class="line">&#125;</span><br><span class="line">return id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="8.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="MD5进制算法"><a href="#MD5进制算法" class="headerlink" title="MD5进制算法"></a>MD5进制算法</h3><h4 id="算法一"><a href="#算法一" class="headerlink" title="算法一"></a>算法一</h4><p><strong>自增序列算法</strong> 也叫永不重复算法</p><p>设置 id 自增，一个 10进制 id 对应一个 62进制的数值，1对1，也就不会出现重复的情况。这个利用的就是低进制转化为高进制时，字符数会减少的特性。</p><p>如下图：十进制 10000，对应不同进制的字符表示。 </p><p><img src="9.png" alt></p><p>短址的长度一般设为 6 位，而每一位是由 <code>[a - z, A - Z, 0 - 9]</code> 总共 62 个字母组成的，所以 6 位的话，总共会有 62^6 ~= 568亿种组合，基本上够用了。</p><h4 id="算法二"><a href="#算法二" class="headerlink" title="算法二"></a>算法二</h4><ol><li>将长网址 <code>md5</code> 生成 32 位签名串,分为 4 段, 每段 8 个字节</li><li>对这四段循环处理, 取 8 个字节, 将他看成 16 进制串与 0x3fffffff(30位1) 与操作, 即超过 30 位的忽略处理</li><li>这 30 位分成 6 段, 每 5 位的数字作为字母表的索引取得特定字符, 依次进行获得 6 位字符串</li><li>总的 <code>md5</code> 串可以获得 4 个 6 位串,取里面的任意一个就可作为这个长 url 的短 url 地址</li></ol><p>这种算法,虽然会生成4个,但是仍然存在重复几率;</p><h4 id="两种算法对比"><a href="#两种算法对比" class="headerlink" title="两种算法对比"></a>两种算法对比</h4><p>第一种算法的好处就是简单好理解，永不重复。但是短码的长度不固定，随着 id 变大从一位长度开始递增。如果非要让短码长度固定也可以就是让 id 从指定的数字开始递增就可以了。百度短网址用的这种算法。上文说的开源短网址项目 <code>YOURLS</code> 也是采用了这种算法。<a href="https://github.com/YOURLS/YOURLS/blob/master/includes/functions.php" target="_blank" rel="noopener">源码学习</a></p><p>第二种算法，存在碰撞（重复）的可能性，虽然几率很小。短码位数是比较固定的。不会从一位长度递增到多位的。据说微博使用的这种算法。</p><p>我使用的算法一。有一个不太好的地方就是出现的短码是有序的，可能会不安全。我的处理方式是构造 62进制的字母不要按顺序排列。因为想实现自定义短码的功能，我又对算法一进行了优化，下文会介绍。</p><h4 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h4><p><strong>自增序列算法流程图</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="10.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>据说微博使用的这种算法：</p><ul><li>将长网址 md5 生成 32 位签名串,分为 4 段, 每段 8 个字节</li><li>对这四段循环处理, 取 8 个字节, 将他看成 16 进制串与 0x3fffffff(30位1) 与操作, 即超过 30 位的忽略处理</li><li>这 30 位分成 6 段, 每 5 位的数字作为字母表的索引取得特定字符, 依次进行获得 6 位字符串</li><li>总的 md5 串可以获得 4 个 6 位串,取里面的任意一个就可作为这个长 url 的短 url 地址</li></ul><p>这种算法存在碰撞（重复）的可能性，短码位数固定，生成之前需要进行防碰撞的检测</p><p><strong>自增序列算法 + 用户自定义短码 流程图</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="11.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p><strong>实现自定义短码</strong></p><p>数据库增加一个类型 type 字段，用来标记短码是用户自定义生成的，还是系统自动生成的。<br>如果有用户自定义过短码，把它的类型标记自定义。每次根据 id 计算短码的时候，如果发现对应的短码被占用了，就从类型为自定义的记录里选取一条记录，用它的 id 去计算短码。<br>这样既可以区分哪些长连接是用户自己定义还是系统自动生成的，还可以不浪费被自定义短码占用的 id;</p><p>保留了 1 到 2 位的 短码，从三位的短码开始生成的。就像域名的保留域名一样，好的要自己预留;</p><table><thead><tr><th>位数</th><th>个数</th><th>区间</th></tr></thead><tbody><tr><td>1位</td><td>62</td><td>0 - 61</td></tr><tr><td>2位</td><td>3844</td><td>62 - 3843</td></tr><tr><td>3位</td><td>约 23万</td><td>3844 - 238327</td></tr><tr><td>4位</td><td>约 1400万</td><td>238328 - 14776335</td></tr><tr><td>5位</td><td>约 9.1亿</td><td>14776336 - 916132831</td></tr><tr><td>6位</td><td>约 568亿</td><td>916132832 - 56800235583</td></tr></tbody></table><p><strong>数据表设计</strong></p><p>​    links 表</p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>id</td><td>link_id</td></tr><tr><td>url</td><td>长连接</td></tr><tr><td>keyword</td><td>短链接码</td></tr><tr><td>type</td><td>系统: “system” 自定义: “custom”</td></tr><tr><td>insert_at</td><td>插入时间</td></tr><tr><td>updated_at</td><td>更新时间</td></tr></tbody></table><p><strong>后期功能扩展</strong></p><p>统计：点击量、访问的 ip 地域、用户使用的设备</p><p>管理后台：删除、数据量</p><p>登录：权限管理</p><p>设置密码：输入密码才可以继续访问</p>]]></content>
    
    <summary type="html">
    
      将一个长URL变成短URL及原理
    
    </summary>
    
    
      <category term="设计" scheme="http://www.xmidou.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="开发" scheme="http://www.xmidou.com/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>本地文件检索设计</title>
    <link href="http://www.xmidou.com/2019/05/23/design-searchfile/"/>
    <id>http://www.xmidou.com/2019/05/23/design-searchfile/</id>
    <published>2019-05-23T10:34:16.000Z</published>
    <updated>2019-05-24T01:57:15.571Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="一-操作系统类型"><a href="#一-操作系统类型" class="headerlink" title="(一)操作系统类型"></a>(一)操作系统类型</h2><p>文件的检索功能需要包含:</p><ul><li><p>windows操作系统</p></li><li><p>liunx操作系统</p></li></ul><h2 id="二-需求描述"><a href="#二-需求描述" class="headerlink" title="(二)需求描述"></a>(二)需求描述</h2><p>要求：</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 提供java的SDK包，以maven的方式引入到业务系统中使用。</span><br><span class="line"></span><br><span class="line">- 调用查询的接口</span><br><span class="line"></span><br><span class="line">- 指定路径下的所有子目录的检索（如：D:\test或/root/test）</span><br></pre></td></tr></table></figure></li></ul><p>检索条件：</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 文件名搜索</span><br><span class="line"></span><br><span class="line">- 文件内容搜索</span><br></pre></td></tr></table></figure></li></ul><p>检索范围：</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- 指定文件大小</span><br><span class="line"></span><br><span class="line">- 指定文件扩展名</span><br><span class="line"></span><br><span class="line">- 指定最后更新时间</span><br><span class="line"></span><br><span class="line">- 支持全文及文件件名的模糊搜索</span><br></pre></td></tr></table></figure></li></ul><p>实际应用的场景：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">每天文件的生成的数量为800个左右，单个文件大小为200K-300K，极少情况个别文件大小在100M-500M;</span><br></pre></td></tr></table></figure><p>文件格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doc、docx、xml、txt、pdf、jpg、png</span><br></pre></td></tr></table></figure><p>特殊约定：</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- pdf、doc、docx等内嵌图片的内容无法支持内容的检索；</span><br><span class="line"></span><br><span class="line">- jpg、png等图片类文件无法支持内容检索；</span><br><span class="line"></span><br><span class="line">- 视频文件无法支持内容检索；</span><br><span class="line"></span><br><span class="line">- 音频文件无法支持内容检索；</span><br></pre></td></tr></table></figure></li></ul><h2 id="依赖工具"><a href="#依赖工具" class="headerlink" title="依赖工具"></a>依赖工具</h2><p>1、liunx依赖系统自有带的命令行进行文件检索(find、grep、locate)</p><p>2、windws操作系统利用第三方搜索工具：everything-SDK-windows</p><h2 id="三-web微服务"><a href="#三-web微服务" class="headerlink" title="(三)web微服务"></a>(三)web微服务</h2><p>客户端SDK和服务器通过http方式交互；</p><p>客户端：</p><p>提供一个客户端的SDK，并定义搜索接口，指定传入参数：</p><p>1、检索路径（必填）</p><p>2、文件名（文件名和文件内容选填其一）</p><p>3、文件内容（文件名和文件内容选填其一）</p><p>4、指定文件大小（选填）</p><p>5、指定文件扩展名（选填）</p><p>6、指定最近多少时间内更新的文件（选填）</p><p>服务端：</p><p>创建spring boot web程序，包装http接口，服务器调用：</p><p>windows操作系统：</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过everything-sdk检索本地磁盘，返回文件路径和文件名列表</span><br></pre></td></tr></table></figure></li></ul><p>liunx操作系统：</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">执行shell命令(find、grep、locate)检索本地磁盘，返回文件路径和文件名列表</span><br></pre></td></tr></table></figure></li></ul><p>服务拓朴图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="design-file-search-1.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>结语：</p><p>客户端+服务端的设计模式，主要为了解决跨服务器的远程磁盘检索的要求；</p><p>优势：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个客户端可以在多个服务器进行文件检索；</span><br></pre></td></tr></table></figure><p>缺点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">需要将服务端部署到要检索磁盘的服务器上；</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面
    
    </summary>
    
    
      <category term="设计" scheme="http://www.xmidou.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="开发" scheme="http://www.xmidou.com/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>(一)hexo学习笔记</title>
    <link href="http://www.xmidou.com/2019/05/23/hexo-use/"/>
    <id>http://www.xmidou.com/2019/05/23/hexo-use/</id>
    <published>2019-05-23T03:39:08.000Z</published>
    <updated>2019-05-23T09:40:42.185Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="hexo发布到github的坑"><a href="#hexo发布到github的坑" class="headerlink" title="hexo发布到github的坑"></a>hexo发布到github的坑</h2><p>当使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d 或者hexo deploy</span><br></pre></td></tr></table></figure><p>发布到github,如果已经绑定了自己申请的域名，将会被重置失效，</p><p>因此，在发布完后，需要重新设置域名的映射关系。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="hexo-use-1.png" alt="hexo-use-1" title>                </div>                <div class="image-caption">hexo-use-1</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="hexo-use-2.png" alt="hexo-use-2" title>                </div>                <div class="image-caption">hexo-use-2</div>            </figure><p>点击 save 保存后，又可以正常访问网站了。</p>]]></content>
    
    <summary type="html">
    
      附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面
    
    </summary>
    
    
      <category term="技术" scheme="http://www.xmidou.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="站长" scheme="http://www.xmidou.com/tags/%E7%AB%99%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>第一个博客的创建</title>
    <link href="http://www.xmidou.com/2019/05/06/first-blog/"/>
    <id>http://www.xmidou.com/2019/05/06/first-blog/</id>
    <published>2019-05-06T03:39:08.000Z</published>
    <updated>2019-05-23T09:29:57.527Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="我的第一个博客的创建"><a href="#我的第一个博客的创建" class="headerlink" title="我的第一个博客的创建"></a>我的第一个博客的创建</h1><p>一直想做一个自己的Blog，经过曲折的过程，现在终于成形了。在这里记录下创建第一个Blog的过程。</p><h2 id="一、托管的Blog策略"><a href="#一、托管的Blog策略" class="headerlink" title="一、托管的Blog策略"></a>一、托管的Blog策略</h2><p>​    github pages可以为一个注册用户提供一个主域名的的绑定功能。而且在构建网站面可以使用hexo发布到github还是比较方便了。考虑再三，还是接受了这个方便，毕竟是第一次做网站的同学，也不用考虑太多，先做起来，有经验了后面就可以再变通。</p><h3 id="1、组合方案："><a href="#1、组合方案：" class="headerlink" title="1、组合方案："></a><strong>1、组合方案：</strong></h3><p>1、github pages做为网站托管</p><p>2、hexo进行网站编排和和管理发布</p><p>3、typora工具是目前比较好的markdown语言编排工具，可以用来写文章和排版，生成的MD文件放到hexo再发布到github网站。</p><h2 id="二、hexo-github搭建免费的个人博客"><a href="#二、hexo-github搭建免费的个人博客" class="headerlink" title="二、hexo+github搭建免费的个人博客"></a>二、hexo+github搭建免费的个人博客</h2><h3 id="1、准备工具"><a href="#1、准备工具" class="headerlink" title="1、准备工具"></a>1、准备工具</h3><p>在开始一切之前，你必须已经：</p><ul><li>有一个github账号，没有的话去注册一个；</li><li>安装了node.js、npm，并了解相关基础知识；</li><li>安装了git for windows（或者其它git客户端）</li></ul><p>本文所使用的环境：</p><ul><li>Windows7-64X</li><li>node.js_12.0.1</li><li>git_1.9.2</li><li>hexo_3.8.0</li></ul><h3 id="2、搭建github博客"><a href="#2、搭建github博客" class="headerlink" title="2、搭建github博客"></a>2、搭建github博客</h3><h4 id="2-1-创建仓库"><a href="#2-1-创建仓库" class="headerlink" title="2.1 创建仓库"></a>2.1 创建仓库</h4><p>​    新建一个名为<code>你的用户名.github.io</code>的仓库，比如说，如果你的github用户名是test，那么你就新建<code>test.github.io</code>的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 <a href="http://test.github.io" target="_blank" rel="noopener">http://test.github.io</a> 了，是不是很方便？</p><p>由此可见，每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。</p><p>几个注意的地方:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 注册的邮箱一定要验证，否则不会成功；</span><br><span class="line">2. 仓库名字必须是：`username.github.io`，其中`username`是你的用户名；</span><br><span class="line">3. 仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久，我的等了半个小时才生效；</span><br></pre></td></tr></table></figure><p>创建成功后，默认会在你这个仓库里生成一些示例页面，以后你的网站所有代码都是放在这个仓库里啦。</p><h4 id="2-2-绑定域名"><a href="#2-2-绑定域名" class="headerlink" title="2.2 绑定域名"></a>2.2 绑定域名</h4><p>​    当然，你不绑定域名肯定也是可以的，就用默认的 <code>xxx.github.io</code> 来访问，如果你想更个性一点，想拥有一个属于自己的域名，那也是OK的。</p><p>首先你要注册一个域名，域名注册以前总是推荐去<code>godaddy</code>，现在觉得其实国内的阿里云也挺不错的，价格也不贵，毕竟是大公司，放心！</p><p>绑定域名分2种情况：带www和不带www的。</p><p>域名配置最常见有2种方式，CNAME和A记录，CNAME填写域名，A记录填写IP，由于不带www方式只能采用A记录，所以必须先ping一下<code>你的用户名.github.io</code>的IP，然后到你的域名DNS设置页，将A记录指向你ping出来的IP，将CNAME指向<code>你的用户名.github.io</code>，这样可以保证无论是否添加www都可以访问，如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="first-blog_1.png" alt="first-blog_1" title>                </div>                <div class="image-caption">first-blog_1</div>            </figure><p>然后到你的github项目根目录新建一个名为CNAME的文件（无后缀），里面填写你的域名，加不加www看你自己喜好，因为经测试：</p><ul><li>如果你填写的是没有www的，比如 mygit.me，那么无论是访问 <a href="http://www.mygit.me" target="_blank" rel="noopener">http://www.mygit.me</a> 还是 <a href="http://mygit.me" target="_blank" rel="noopener">http://mygit.me</a> ，都会自动跳转到 <a href="http://mygit.me" target="_blank" rel="noopener">http://mygit.me</a></li></ul><ul><li>如果你填写的是带www的，比如 <a href="http://www.mygit.me" target="_blank" rel="noopener">www.mygit.me</a> ，那么无论是访问 <a href="http://www.mygit.me" target="_blank" rel="noopener">http://www.mygit.me</a> 还是 <a href="http://mygit.me" target="_blank" rel="noopener">http://mygit.me</a> ，都会自动跳转到 <a href="http://www.mygit.me" target="_blank" rel="noopener">http://www.mygit.me</a></li></ul><ul><li>如果你填写的是其它子域名，比如 abc.mygit.me，那么访问 <a href="http://abc.mygit.me" target="_blank" rel="noopener">http://abc.mygit.me</a> 没问题，但是访问 <a href="http://mygit.me" target="_blank" rel="noopener">http://mygit.me</a> ，不会自动跳转到 <a href="http://abc.mygit.me" target="_blank" rel="noopener">http://abc.mygit.me</a></li></ul><p>另外说一句，在你绑定了新域名之后，原来的<code>你的用户名.github.io</code>并没有失效，而是会自动跳转到你的新域名。</p><h4 id="2-3-配置SSH-KEY"><a href="#2-3-配置SSH-KEY" class="headerlink" title="2.3 配置SSH KEY"></a>2.3 配置SSH KEY</h4><p>​    为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/. ssh #检查本机已存在的ssh密钥</span><br></pre></td></tr></table></figure><p>如果提示：No such file or directory 说明你是第一次使用git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮件地址&quot;</span><br></pre></td></tr></table></figure><p>然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到<code>.ssh\id_rsa.pub</code>文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="first-blog_2.png" alt="first-blog_2" title>                </div>                <div class="image-caption">first-blog_2</div>            </figure><p>将刚复制的内容粘贴到key那里，title随便填，保存。</p><h4 id="2-4-测试是否成功"><a href="#2-4-测试是否成功" class="headerlink" title="2.4 测试是否成功"></a>2.4 测试是否成功</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com # 注意邮箱地址不用改</span><br></pre></td></tr></table></figure><p>如果提示<code>Are you sure you want to continue connecting (yes/no)?</code>，输入yes，然后会看到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi liuxianan! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><p>看到这个信息说明SSH已配置成功！</p><p>此时你还需要配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;liuxianan&quot;// 你的github用户名，非昵称</span><br><span class="line">$ git config --global user.email  &quot;xxx@qq.com&quot;// 填写你的github注册邮箱</span><br></pre></td></tr></table></figure><p>具体这个配置是干嘛的我没仔细深究。</p><h3 id="3、使用hexo"><a href="#3、使用hexo" class="headerlink" title="3、使用hexo"></a>3、使用hexo</h3><h4 id="3-1-hexo简介"><a href="#3-1-hexo简介" class="headerlink" title="3.1 hexo简介"></a>3.1 hexo简介</h4><p>​    Hexo是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题。</p><p>官网： <a href="http://hexo.io" target="_blank" rel="noopener">http://hexo.io</a><br>github: <a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">https://github.com/hexojs/hexo</a></p><h4 id="3-2-hexo原理"><a href="#3-2-hexo原理" class="headerlink" title="3.2 hexo原理"></a>3.2 hexo原理</h4><p>​    由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。</p><h4 id="3-3-注意事项"><a href="#3-3-注意事项" class="headerlink" title="3.3 注意事项"></a>3.3 注意事项</h4><p>安装之前先来说几个注意事项：</p><ul><li><p>很多命令既可以用Windows的cmd来完成，也可以使用git bash来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用git bash来执行；</p></li><li><p>hexo不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，所以注意不要被误导；</p></li><li><p>hexo有2种<code>_config.yml</code>文件，一个是根目录下的全局的<code>_config.yml</code>，一个是各个<code>theme</code>下的；</p></li></ul><h4 id="3-4-安装"><a href="#3-4-安装" class="headerlink" title="3.4 安装"></a>3.4 安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo</span><br></pre></td></tr></table></figure><h4 id="3-5-初始化"><a href="#3-5-初始化" class="headerlink" title="3.5 初始化"></a>3.5 初始化</h4><p>在电脑的某个地方新建一个名为hexo的文件夹（名字可以随便取），比如我的是<code>F:\Workspaces\hexo</code>，由于这个文件夹将来就作为你存放代码的地方，所以最好不要随便放。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /f/Workspaces/hexo/</span><br><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><p>hexo会自动下载一些文件到这个目录，包括node_modules，目录结构如下图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="first-blog_3.png" alt="first-blog_3" title>                </div>                <div class="image-caption">first-blog_3</div>            </figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g # 生成</span><br><span class="line">$ hexo s # 启动服务</span><br></pre></td></tr></table></figure><p>执行以上命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github去的：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="first-blog_4.png" alt="first-blog_4" title>                </div>                <div class="image-caption">first-blog_4</div>            </figure><p><code>hexo s</code>是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为4000这个端口太常见了，解决端口冲突问题请参考这篇文章：</p><p><a href="http://blog.liuxianan.com/windows-port-bind.html" target="_blank" rel="noopener">http://blog.liuxianan.com/windows-port-bind.html</a></p><p>第一次初始化的时候hexo已经帮我们写了一篇名为 Hello World 的文章，默认的主题比较丑，打开时就是这个样子：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="first-blog_5.png" alt="first-blog_5" title>                </div>                <div class="image-caption">first-blog_5</div>            </figure><h4 id="3-6-修改主题"><a href="#3-6-修改主题" class="headerlink" title="3.6 修改主题"></a>3.6 修改主题</h4><p>既然默认主题很丑，那我们别的不做，首先来替换一个好看点的主题。这是 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">官方主题</a>。</p><p>个人比较喜欢的2个主题：<a href="https://github.com/pinggod/hexo-theme-jekyll" target="_blank" rel="noopener">hexo-theme-jekyll</a> 和 <a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">hexo-theme-yilia</a>。</p><p>首先下载这个主题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /f/Workspaces/hexo/</span><br><span class="line">$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure><p>下载后的主题都在这里：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="first-blog_6.png" alt="first-blog_6" title>                </div>                <div class="image-caption">first-blog_6</div>            </figure><p>修改<code>_config.yml</code>中的<code>theme: landscape</code>改为<code>theme: yilia</code>，然后重新执行<code>hexo g</code>来重新生成。</p><p>如果出现一些莫名其妙的问题，可以先执行<code>hexo clean</code>来清理一下public的内容，然后再来重新生成和发布。</p><h4 id="3-7-上传之前"><a href="#3-7-上传之前" class="headerlink" title="3.7 上传之前"></a>3.7 上传之前</h4><p>在上传代码到github之前，一定要记得先把你以前所有代码下载下来（虽然github有版本管理，但备份一下总是好的），因为从hexo提交代码时会把你以前的所有代码都删掉。</p><h4 id="3-8-上传到github"><a href="#3-8-上传到github" class="headerlink" title="3.8 上传到github"></a>3.8 上传到github</h4><p>果你一切都配置好了，发布上传很容易，一句<code>hexo d</code>就搞定，当然关键还是你要把所有东西配置好。</p><p>首先，<code>ssh key</code>肯定要配置好。</p><p>其次，配置<code>_config.yml</code>中有关deploy的部分：</p><p>正确写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:liuxianan/liuxianan.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>错误写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: github</span><br><span class="line">  repository: https://github.com/liuxianan/liuxianan.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>后面一种写法是hexo2.x的写法，现在已经不行了，无论是哪种写法，此时直接执行<code>hexo d</code>的话一般会报如下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Deployer not found: github 或者 Deployer not found: git</span><br></pre></td></tr></table></figure><p>原因是还需要安装一个插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>其它命令不确定，部署这个命令一定要用git bash，否则会提示<code>Permission denied (publickey).</code></p><p>打开你的git bash，输入<code>hexo d</code>就会将本次有改动的代码全部提交，没有改动的不会：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="first-blog_7.png" alt="first-blog_7" title>                </div>                <div class="image-caption">first-blog_7</div>            </figure><h4 id="3-9-保留CHANE、README-md等文件"><a href="#3-9-保留CHANE、README-md等文件" class="headerlink" title="3.9 保留CHANE、README.md等文件"></a>3.9 保留CHANE、README.md等文件</h4><p>提交之后网页上一看，发现以前其它代码都没了，此时不要慌，一些非md文件可以把他们放到source文件夹下，这里的所有文件都会原样复制（除了md文件）到public目录的：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="first-blog_8.png" alt="first-blog_8" title>                </div>                <div class="image-caption">first-blog_8</div>            </figure><p>由于hexo默认会把所有md文件都转换成html，包括README.md，所有需要每次生成之后、上传之前，手动将README.md复制到public目录，并删除README.html。</p><h4 id="3-10-常用hexo命令"><a href="#3-10-常用hexo命令" class="headerlink" title="3.10 常用hexo命令"></a>3.10 常用hexo命令</h4><p>常见命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</span><br><span class="line">hexo deploy #部署到GitHub</span><br><span class="line">hexo help  # 查看帮助</span><br><span class="line">hexo version  #查看Hexo的版本</span><br></pre></td></tr></table></figure><p>缩写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure><p>组合命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo s -g #生成并本地预览</span><br><span class="line">hexo d -g #生成并上传</span><br></pre></td></tr></table></figure><h4 id="3-11-config-yml"><a href="#3-11-config-yml" class="headerlink" title="3.11 _config.yml"></a>3.11 _config.yml</h4><p>这里面都是一些全局配置，每个参数的意思都比较简单明了，所以就不作详细介绍了。</p><p>需要特别注意的地方是，冒号后面必须有一个空格，否则可能会出问题。</p><h4 id="3-12-创建文章"><a href="#3-12-创建文章" class="headerlink" title="3.12 创建文章"></a>3.12 创建文章</h4><p>定位到我们的hexo根目录，执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &apos;my-first-blog&apos;</span><br></pre></td></tr></table></figure><p>hexo会帮我们在<code>_posts</code>下生成相关md文件：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="first-blog_9.png" alt="first-blog_9" title>                </div>                <div class="image-caption">first-blog_9</div>            </figure><p>我们只需要打开这个文件就可以开始写博客了，默认生成如下内容：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="first-blog_10.png" alt="first-blog_10" title>                </div>                <div class="image-caption">first-blog_10</div>            </figure><p>当然你也可以直接自己新建md文件，用这个命令的好处是帮我们自动生成了时间。</p><p>一般完整格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: postName #文章页面上的显示名称，一般是中文</span><br><span class="line">date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改</span><br><span class="line">categories: 默认分类 #分类</span><br><span class="line">tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格</span><br><span class="line">description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">以下是正文</span><br></pre></td></tr></table></figure><p>那么<code>hexo new page &#39;postName&#39;</code>命令和<code>hexo new &#39;postName&#39;</code>有什么区别呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;my-second-blog&quot;</span><br></pre></td></tr></table></figure><p>生成如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="first-blog_11.png" alt="first-blog_11" title>                </div>                <div class="image-caption">first-blog_11</div>            </figure><p>最终部署时生成：<code>hexo\public\my-second-blog\index.html</code>，但是它不会作为文章出现在博文目录。</p><h4 id="3-13-第三方文章编排的工具"><a href="#3-13-第三方文章编排的工具" class="headerlink" title="3.13 第三方文章编排的工具"></a>3.13 第三方文章编排的工具</h4><p>hexo是以markdown语法定义的文章，以md后缀名为结尾的文件，hexo将这个文件最终编辑成html页面。</p><p>本篇文章就是用markdown工具typora进行编辑的。</p><h4 id="3-14-如何让博文列表不显示全部内容"><a href="#3-14-如何让博文列表不显示全部内容" class="headerlink" title="3.14 如何让博文列表不显示全部内容"></a>3.14 如何让博文列表不显示全部内容</h4><p>默认情况下，生成的博文目录会显示全部的文章内容，如何设置文章摘要的长度呢？</p><p>答案是在合适的位置加上<code>&lt;!--more--&gt;</code>即可，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 前言</span><br><span class="line">使用github pages服务搭建博客的好处有：</span><br><span class="line"></span><br><span class="line">1. 全是静态文件，访问速度快；</span><br><span class="line">2. 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；</span><br><span class="line">3. 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；</span><br><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"></span><br><span class="line">4. 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；</span><br><span class="line">5. 博客内容可以轻松打包、转移、发布到其它平台；</span><br><span class="line">6. 等等；</span><br></pre></td></tr></table></figure><p>最终效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="first-blog_12.png" alt="first-blog_12" title>                </div>                <div class="image-caption">first-blog_12</div>            </figure>]]></content>
    
    <summary type="html">
    
      附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面
    
    </summary>
    
    
      <category term="站长" scheme="http://www.xmidou.com/tags/%E7%AB%99%E9%95%BF/"/>
    
      <category term="爱好" scheme="http://www.xmidou.com/tags/%E7%88%B1%E5%A5%BD/"/>
    
  </entry>
  
</feed>
