<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>知识涓流</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.xmidou.com/"/>
  <updated>2019-08-20T06:29:51.164Z</updated>
  <id>http://www.xmidou.com/</id>
  
  <author>
    <name>泡菜</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用户空间文件系统 FUSE：架构和实现细节</title>
    <link href="http://www.xmidou.com/2019/08/20/liunxFuse/"/>
    <id>http://www.xmidou.com/2019/08/20/liunxFuse/</id>
    <published>2019-08-20T06:25:08.000Z</published>
    <updated>2019-08-20T06:29:51.164Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>传统上文件系统是作为操作系统内核一部分进行实现的。然而, 随着文件系统复杂性的增加, 许多新的文件系统开始在用户空间中开发。目前, 用户空间文件系统经常被用来作为新文件系统原型开发和设计评估。用户空间文件系统的主要缺点是性能差, 但没人对用户空间文件系统的性能进行深入探讨。 因此, 用户空间文件系统目前仍然存在相当大的争议: 而有些人认为用户空间文件系统只是一个不能用于生产环境的玩具, 另一些人在用户空间中开发了成熟的、用于生产环境的文件系统.。本文分析了FUSE的设计和实现框架，在各种工作负载下分析了它的性能特点。实验表明，在不同工作负载和硬件环境中， FUSE 性能变化很大，某些情况和内核文件系统差不多，某些情况下即使优化后也下降83%，CPU 利用率也增加了31%</p><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>文件系统为应用程序提供了访问数据的通用接口。虽然微内核在用户空间实现文件系统，大多数文件系统都是宏内核的一部分。文件系统的内核实现避免了微内核和用户空间守护进程之前消息传递的高昂开销。</p><p>近些年来，用户空间文件系统越来越受欢迎，有以下4个原因：</p><ol><li>多个可堆叠(stackable)文件系统在现有文件系统上添加了专用功能，例如去重和压缩；</li><li>在学术界和研发环境中, 这种框架加速了实验和新方法的原型设计；</li><li>一些现存的内核层文件系统被移植到用户空间，例如 ZFS 和 NTFS；</li><li>许多公司依赖用户空间文件系统的实现，例如 IBM 的 GPFS，Nimble Storage 的 CASL，Apache 的 HDFS ，GFS，RedHat 的 GlusterFS 和 Data Domain 的 DDFS。</li></ol><blockquote><p>A stackable (layered) file system is a file system that does not store data itself. Instead, it uses another file system for its storage. We call the stackable file system the <em>upper</em> file system, and the file systems it stacks on top of the <em>lower</em> file systems.</p></blockquote><p>由于文件系统越来越复杂，用户空间文件系统也越来越受欢迎，例如 Btrfs 代码量超过了8万行。用户空间的代码更易于开发和维护。内核的 Bug 会导致系统整体瘫痪，用户空间的 bug 影响范围更小。许多库和编程语言在用户空间是多平台可用的。尽管用户文件系统的目标不是完全取代内核文件系统，但是目前用户文件系统地位不断提高，也导致了支持者和反对者的更激烈的讨论。辩论主要围绕两个权衡因素：（1）用户空间实现带来的性能开销有多大;（2）用户空间开发有多容易。 易于开发是非常主观的，难以形式化并因此进行评估；但性能更容易根据经验进行评估。 奇怪的是，关于用户空间文件系统框架的性能几乎没有人去进行研究。</p><p>文本中我们使用 FUSE，并探究其性能。我们基于以下4个原因首先讨论 FUSE 的设计和实现：</p><ol><li>FUSE 架构有点复杂；</li><li>FUSE 信息在网络上很少；</li><li>FUSE 的源码中有很多复杂的异步调用和用户内核通信，很难分析；</li><li>由于 FUSE 的受欢迎程度，FUSE 的实现细节分析很有价值。</li></ol><p>我们使用 FUSE 框架开发了一个简单的可堆叠文件系统，将其构建在 EXT4 文件系统上，然后评估、对比其性能与原生Ext4的性能。我们使用了各种各样的微观、宏观工作负载，并且针对不同硬件使用了 FUSE 的基本和优化配置。 我们发现， FUSE 的性能取决于工作负载和硬件，某些情况下 FUSE 性能与 EXT4接近，但在最坏的情况下 FUSE 的可能会比 EXT4 慢3倍。 接下来，我们为 FUSE 设计并构建了一个丰富的测试系统来收集详细的性能指标。 这些统计数据适用于任何基于 FUSE 的系统。 我们使用这个测试系统来识别 FUSE 瓶颈，并解释为什么，例如，为什么 FUSE 的性能在不同的工作负载下有巨大的差异。</p><h2 id="2-FUSE-设计"><a href="#2-FUSE-设计" class="headerlink" title="2. FUSE 设计"></a>2. FUSE 设计</h2><p>FUSE(Filesystem in Userspace)是使用最广的用户空间文件系统框架。保守估计目前至少有100多个基于 FUSE 的文件系统可以在 Internet 上被找到。虽然仍然有其他用户空间文件系统框架，我们仍然选择了最受欢迎的 FUSE。</p><p>虽然很多人因为 FUSE 提供的简单易用的 API 选择了 FUSE 来实现文件系统，但是几乎没人讨论 FUSE 的内部架构、实现和性能。为了评估 FUSE 的性能，我们不仅要了解 FUSE 的架构设计，还要了解一些实现细节。在本节中，我们首先介绍FUSE 的基础知识，然后解释某些重要的实现细节。FUSE 适用于多种操作系统，我们选择了使用最广泛的 Linux。我们在 Linux kernel 4.1.13 进行代码分析和实验。我们还使用了commit id 为 386b1b 的 FUSE 库。该版本在FUSE v2.9.4之上，提交了几个重要的补丁，我们不希望从我们的评估中排除这些补丁。 在撰写本文时，我们手动检查了所有新提交，并确认自从所选版本发布以来没有向FUSE添加任何新的主要功能或改进。</p><h3 id="2-1-架构"><a href="#2-1-架构" class="headerlink" title="2.1 架构"></a>2.1 架构</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="1_1.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>FUSE 包含内核模块和一个用户层的守护进程。内核模块加载时被注册成 Linux 虚拟文件系统的一个 fuse 文件系统驱动。这个 fuse 驱动充当不同用户空间文件系统的代理。除此之外，在注册一个新 fuse 文件系统时，FUSE 的内核模块还注册了一个<code>/dev/fuse</code>的块设备。该设备作为用户空间 FUSE 守护进程和内核通信的接口。通常，守护进程从<code>/dev/fuse</code>读取 FUSE 请求，处理，然后将回复写入<code>/dev/fuse</code></p><p>图1显示了 FUSE 的架构。当用户应用在一个挂在的 FUSE 文件系统上执行某些操作时，VFS 将操作路由至 FUSE 的内核驱动。该驱动创建了一个 FUSE 请求结构体，并把该结构体放到了 FUSE 的队列中。此时，执行操作的进程通常处于等待状态。FUSE 的用户空间守护进程通过读取<code>/dev/fuse</code>将请求从内核队列中取出，并且处理请求。处理请求通常需要重新进入内核：例如，在一个堆叠文件 FUSE 文件系统中，守护进程会提交操作到底层文件系统中(例如 EXT4)；或者在基于块的 FUSE 系统中，守护进程对一个块设备读写数据。当处理完请求后，FUSE 守护进程将响应写会<code>/dev/fuse</code>；FUSE 的内核驱动会将请求标记为 completed，然后唤醒原用户进程。</p><p>应用程序调用的某些文件系统操作可以不与用户空间守护进程通信。例如，读取一个文件被内核缓存的内容，无需转发至 FUSE 驱动。</p><h3 id="2-2-实现细节"><a href="#2-2-实现细节" class="headerlink" title="2.2 实现细节"></a>2.2 实现细节</h3><p>我们需要讨论一些 FUSE 的实现细节：用户-内核通信协议，库和 API，内核 FUSE 队列，拼接，多线程和缓存写回。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="1_2.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h4 id="用户-内核协议"><a href="#用户-内核协议" class="headerlink" title="用户-内核协议"></a>用户-内核协议</h4><p>当 FUSE 内核驱动和用户空间守护进程通信时，会构造一个 FUSE 请求结构体。请求的类型取决于传输的文件系统操作。表1中列出了 FUSE 全部43种请求类型，并以语义进行了分组。如表1所示，大部分请求类型和传统 VFS 文件操作有直观映射：忽略如 CREATE/READ 这些操作，我们把重点放在那些不太直观的请求类型上，这些请求在表1中加粗标记。</p><p>当一个文件系统被挂载内核会构造一个<code>INIT</code>请求。此时用户空间守护进程会和内核协商(1)通信协议版本，(2)支持的特定功能集，(3)参数设定。相反，当文件系统卸载时内核发送<code>DESTROY</code>请求。当收到该请求时，守护进程应当执行所有必要的清理工作。由于守护程序正常退出，此会话不再收到来自内核的请求，后续对<code>/dev/fuse</code>的读取都将返回0。</p><p>当任何先前发送的请求被取消时，例如一个读请求被用户中止，内核会发送一个<code>INTERRUPT</code>请求。每个请求都有一个唯一的序号，因此<code>INTERRUPT</code>可以用该序号干掉对应的请求。序号由内核分配，同时被用作用户空间回复时定位完成的消息。每个请求还包含一个node ID: 一个无符号的64位整形，用来在内核和用户空间标识一个 inode。路径到inode的转换由<code>LOOKUP</code>请求执行。 每次查找现有的inode（或者创建一个新的inode）时，内核都会将inode保存在inode缓存中。 从dcache中删除inode时，内核会将<code>FORGET</code>请求传递给用户空间守护程序。 此时，守护程序可能决定回收相应的数据结构。 <code>BATCH FORGET</code>允许内核使用请求删除多个inode。</p><p>当用户应用程序打开文件时，内核会生成<code>OPEN</code>请求。回复此请求时，FUSE守护程序有可能选择为打开的文件分配一个64位的文件句柄。随后内核返回与此打开文件关联的每个请求时都会返回此文件句柄。用户空间守护程序可以使用句柄来存储每个打开的文件信息。例如，可堆叠文件系统可以存储在底层文件系统中打开的文件的描述符，作为FUSE文件句柄的一部分。每次关闭一个被打开文件时都会生成<code>FLUSH</code>请求；当没有对打开的文件的引用时发送<code>RELEASE</code>请求。</p><p><code>OPENDIR</code>和<code>RELEASEDIR</code>请求是针对目录的，具有与<code>OPEN</code>和<code>RELEASE</code>相同的语义。 <code>READDIRPLUS</code>请求与<code>READDIR</code>类似，会返回一个或多个目录条目，除此之外它还包括每个条目的元数据信息。这允许内核预填充每个条目的inode缓存（类似于NFSv3的READDIRPLUS过程）。</p><p>当内核判断一个用户进程是否有权访问某个文件时，它会生成一个<code>ACCESS</code>请求。 通过处理此请求，FUSE 守护程序可以实现自定义的权限逻辑。 但是，通常用户使用默认权限选项挂载FUSE，该选项允许内核根据标准Unix属性（所有权和权限位）授予或拒绝对文件的访问权限。 在这种情况下，内核不会生成<code>ACCESS</code>请求。</p><h3 id="库和-API"><a href="#库和-API" class="headerlink" title="库和 API"></a>库和 API</h3><p>从概念上讲，FUSE库包含两个级别。低级库负责（1）接收和解析来自内核的请求，（2）向内核发送回复，（3）配置和挂载文件系统，以及（4）隐藏内核和用户空间之间潜在的版本差异。 此部分导出为 <em>Low-level FUSE API</em>。</p><p><em>High-level Fuse API</em> 构建在 Low-level FUSE API 之上，允许开发人员忽略文件路径到inode映射的实现细节。 为了简化了代码开发，high-level API中既不存在inode也不存在查找操作。因此，所有高级API方法直接在文件路径上操作。 高级API还可以处理请求中断，同时也提供了其他方便的功能：例如，开发人员可以使用更常见的<code>chown()</code>，<code>chmod()</code>和<code>truncate()</code>方法，避免使用低级的<code>setattr()</code>。 文件系统开发人员必须通过平衡操作灵活性与开发简易性来决定使用哪个API。</p><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="1_3.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>在2.1节中，我们提到 FUSE 的内核模块种有一个请求队列。 实际上， FUSE 在内核中维护了五个队列，如图2所示：<em>inperrupts</em>，<em>forgets</em>，<em>pending</em>，<em>processing</em> 和 <em>backgroupd</em>。一个请求在任何时候都只属于一个队列。 FUSE 将 <code>INTERRUPT</code> 请求放入 <em>inperrupts</em> 队列，<code>FORGET</code> 请求放在 <em>forgets</em> 队列中，同步请求（例如，元数据）放在 <em>pending</em> 队列中。当文件系统守护程序从<code>/dev/fuse</code>读取请求时，请求将按如下方式发送到用户的守护程序：</p><ol><li>优先处理中断队列中的请求，保证中断请求在任何其他请求之前将被发送到用户空间。</li><li>公平对待 <code>FORGET</code> 请求和非 <code>FORGET</code> 请求：每发送8个非 <code>FORGET</code> 请求，就发送16个 <code>FORGET</code> 请求。这样做可以在出现大量突发性的 <code>FORGET</code> 请求，其他请求也可以被同时处理。<em>pending</em> 队列中最旧的请求被发送到用户空间的同时也被加入到 <em>processing</em> 队列。因此，<em>processing</em> 队列中的请求都是当前正在被守护程序处理的请求。如果 <em>pending</em> 队列为空，则在FUSE守护程序阻塞在读取调用上。当守护程序回复请求时（通过写入<code>/dev/fuse</code>），相应的请求将从 <em>processing</em> 队列中删除。</li></ol><blockquote><p>具体处理 FORGET 和非 FORGET 请求的逻辑需要在源码中验明</p></blockquote><p><em>background</em> 队列用于暂存异步请求。在默认配置下，只有读请求进入 <em>background</em> 队列；当writeback cache启用时，写请求也会进入 <em>background</em> 队列。当开启写回缓存时，来自用户进程的写入先在页缓存中累积，然后当bdflush 线程被唤醒时会下刷脏页。在下刷脏页时，FUSE会构造异步写入请求，并将它们放入 <em>background</em> 队列中。<em>background</em> 队列中的请求会周期进入 <em>pending</em> 队列。 FUSE <em>pending</em> 队列中异步请求的<code>max_backgroud</code>时（默认为12）。</p><blockquote><p>在 fs/fuse/inode.c:56 #define FUSE_DEFAULT_MAX_BACKGROUND 12</p></blockquote><p>当 <em>pending</em> 队列中的异步请求少于12个时，<em>backgroup</em> 队列中的请求将被移动到 <em>pending</em> 队列。这样做的目的是限制突发大量的异步请求对重要同步请求造成的延迟。</p><p>队列的长度没有明确限制。但是，当 <em>pending</em> 和 <em>processing</em> 队列中的异步请求数达到阈值<code>congestion_threshold</code>（<code>max_backgroud</code>的75％，默认为9）时，FUSE 会通知 VFS 已拥塞。之后 VFS 会限制此用户进程文件系统的写操作。</p><blockquote><p>在 fs/fuse/inode.c:59 #define FUSE_DEFAULT_CONGESTION_THRESHOLD (FUSE_DEFAULT_MAX_BACKGROUND * 3 / 4)</p></blockquote><h4 id="splice-和-FUSE-buffer"><a href="#splice-和-FUSE-buffer" class="headerlink" title="splice 和 FUSE buffer"></a>splice 和 FUSE buffer</h4><p>在默认配置中，FUSE 守护程序必须调用<code>read()</code>从<code>/dev/fuse</code>读取请求，调用<code>write()</code>写入<code>/dev/fuse</code>回复请求。每次读写调用都需要进行一次内核-用户空间的内存拷贝哦。这样对 <code>WRITE</code> 和 <code>READ</code> 请求性能损耗特别严重，因为一次内存拷贝需要处理大量数据。为了缓解这个问题，FUSE 可以使用Linux内核提供的 <code>splice</code> 功能。<code>splice</code> 允许用户空间在两个内核内存缓冲区之间传输数据，而无需将数据复制到用户空间。该功能对于 FUSE 非常有用，例如一个堆叠文件系统，数据可以不进入内核空间而直接传入到底层文件系统中。</p><blockquote><p><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-zerocopy1/index.html" target="_blank" rel="noopener">Linux 中的零拷贝技术，第 1 部分：概述</a></p><p><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-zerocopy2/index.html" target="_blank" rel="noopener">Linux 中的零拷贝技术，第 2 部分：技术实现</a></p></blockquote><p>为了支持 <code>splice</code>，FUSE以两种形式之一表示其缓冲区：（1）由用户守护程序的地址空间中的指针标识的常规内存区域，或（2）由文件描述符指向的内核空间内存。如果用户空间文件系统实现了<code>write_buf()</code>方法，则 FUSE 从<code>/dev/fuse</code>读取数据，并以包含文件描述符的缓冲区的形式将数据直接传递给此方法。 FUSE 拼接包含多页数据的 <code>WRITE</code> 请求。类似的逻辑适用于对具有两页以上数据的 <code>READ</code> 请求的回复。</p><h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><p>由于并行越来越受欢迎，FUSE 增加了多线程支持。在多线程模式下，FUSE的守护进程以一个线程开始。如果 <em>pending</em> 队列中有两个以上的可用请求，则 FUSE 会自动生成其他线程。每个线程一次处理一个请求。处理完请求后，每个线程检查目前是否有超过10个线程；如果有，则该线程退出。 FUSE 库创建的线程数没有明确的上限。但是由于以下两个原因存在隐式的限制：（1）默认情况下，<em>pending</em> 队列中一次最多只有 <code>max_background</code> 个异步请求; （2）<code>pending</code> 队列中的同步请求数取决于用户进程生成的 I/O 活跃数的总量。此外，对于每个 <code>INTERRUPT</code> 和 <code>FORGET</code> 请求，都会生成一个新线程。在没有中断支持且 <code>FORGET</code> 很少的典型系统中，FUSE 守护程序线程的总数最多为 12+numberofrequestsinpendingqueue12+numberofrequestsinpendingqueue。</p><h4 id="写回缓存和最大写"><a href="#写回缓存和最大写" class="headerlink" title="写回缓存和最大写"></a>写回缓存和最大写</h4><p>FUSE 的写操作默认是同步的，且一次发送到用户守护程序的数据量只有 4KB。 这会导致某些工作负载下出现性能瓶颈；使用<code>/bin/cp</code>程序将一个大文件复制到 FUSE 文件系统时，数据会被切分成若干个4KB，然后顺序、同步发送到用户空间。 FUSE 为了解决这个问题，实现了页面缓存的回写策略，然后写入变为异步。 利用该机制，文件数据可以以大块的格式()推送到用户守护程序，目前现在现在为32个page，即128KB。</p>]]></content>
    
    <summary type="html">
    
      用户空间文件系统 FUSE：架构和实现细节
    
    </summary>
    
    
      <category term="设计" scheme="http://www.xmidou.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="存储" scheme="http://www.xmidou.com/tags/%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>SAAS下的多租户研究</title>
    <link href="http://www.xmidou.com/2019/08/16/multiTenantBasedonForSaaSApplication/"/>
    <id>http://www.xmidou.com/2019/08/16/multiTenantBasedonForSaaSApplication/</id>
    <published>2019-08-16T06:20:34.000Z</published>
    <updated>2019-08-16T14:22:56.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>面向SAAS应用的多租户数据为满足租户的数据隔离和按需定制的需求，需要提供支持隔离和易于定制的数据存储机制及索引机制。基于键值对存储方式，提出元数据驱动的映射表索引模型，该模型根据租户定制需求，为租户业务数据形成各自索引元数据，通过元数据驱动实现了索引数据的隔离及定制效果；给出索引的维护策略，根据租户数据访问请求进行索引切片，以逐渐细化的索引切片作为数据访问的基本单位，快速返回租户结果集，实验结果表明，该方案在数据访问分布均衡的情况下，使索引维护及数据访问且有较好的总体发到性能。</p><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>在面向SAAS的应用中，多租户数据库需要提供租户之间的数据隔离及按需制定功能，同时，还要在性能上让用户有比较好的体验，这对数据的存储和索引机制提出了挑战。多租户数据突破了传统的关系数据库、对象数据库的定义，也不同于HBASE这样面向非结构化数据搜索工作的分布式数据库系统。</p><p>多租户数据库存储已经成为热点，但是索引方面的研究还比较少，目前只有SALESFORCE给出了稀疏表模式下的数据透视表索引以及云数据管理基于HBASE存储的多维索引等。稀疏表方式在支持租户定制方面受DBMSr限制。而HBASE存储主要面向非结构化数据处理。本文的研究背景为CRM、HR等系统，以结构化数据为主。综合国内外研究成果，本文采取了键值对模式的存储方式，该存储方式能完美地支持租户定制及数据隔离，并且非常适合于描述结构化数据，面对成千上万的租户，如何实现索引的定制及索引数据的隔离存储都成了需要解决的问题。</p><p>在现阶段，面向SAAS应用的多租户数据管理已经成为国同外研究的热点。针对数据安全性、数据可扩展性等方面提出并分析了一些设计模式；提出了SAAS应用的体系架构，然后提出了基于SAAS模式的企业公共服务平台的３个紧密相连的模型－多用户数据模型、元数据管理模型和安全服务模型；探讨了数据仓库应用在云数据中改进索引模式以减少无效处理时间，提高命中率；探讨了多租户数据层如何支持多租户服务计算；提出了折叠表方式，并对各种数据管理方式得出了较详细的性能数据文献；采用了预定义字段机制支持扩展，在查询方面提出了元数据驱动、外部搜索引擎、次优搜索机制等理念；提出了如何使用XML来支持数据定制及驱动ECA模型；更是在2009年的SIGMOD上讨论了目前主要的集中多租户数据管理方式，包括稀疏表、扩展表、XML、键值对等。该文献经过全面地言语和分析后认为，理想的多租户数据库尚未出现，还有很多的问题需要研究，本文主要探讨了索引方面的关键技术 。</p><p>传统的索引方式，在多租户数据库模式 下，可以执照 objectID、columnNAME及value建立复合索引，针对key_search这种模式，可以迅速定位到某些属性，并且重组成一个元组；对于key_search的范围查询，通过key定位到某个元组，它需要大量的连接才能返回结果集，存在性能问题；对于复合索引里边的次关键字的查询，如果想快速查询，就必须再次创建复合索引，但存储空间巨大 ，否则查询性能严重不足。</p><p>Column_store是面向数据仓库的，基本上是以读为主的应用。数据仓库有着特殊的背景，它由维度和事实构成，维度通常数量有限，维度的组合虽然多，但是最终形成的方体为稀疏型的。在这种前提下,monetDB数据库中提出了cracking的策略，在查询的时候建立查询列的副本，并按照avl树的思想基于每次查询动态调整元组顺序，这是查询驱动的思想，对于事务处理为主的多租户应用，每次更新都要及时地反应出来，这种查询驱动的方式存在着明显的缺陷。本文更多地关注了数据库更新时的索引维护策略。</p><p>HBASE是一个类似Bigtable的分布式数据库，大部分特性和Bigtable一样，是一个稀疏的、长期存储的、多维度的、排序的映射表，这张表的索引是行关键字、列关键字和时间戳。第个值是一个不解释的字符数组，数据都是字符串，不支持数据类型。同一个关系里面的每一行数据都有可以有截然不同的属性，为动态定制属性提供了一种手段。HABSE存在的问题有两点，首先HABSE不是多租户的，没有提供隔离机制；其次，HABSE面向的是非结构化数据，每个值是一个不解释的字符数组，擅长于关键字搜索，它不可能提供基于某个属性组的索引，而结构化数据事务处理需要确切的解释每个属性的信义并对其进行维护。本文更多地底座了结构化数据的索引机制。</p><p>稀疏表方式建立了数据透视表作为索引，比较有代表性的Saleforce就是采取了这种方式。这种索引方式解决了索引列数据对象同擀的问题，但是他并没有深入探讨透视表和稀疏表的数据同步问题，也无法解决透视表数量暴涨的问题。</p><p>本文基于键值对存储模式，分析了现有索引的局限性，结合稀疏表模式下数据透视表的思想，引入了数据映射表索引机制及切片策略，提出了一种用于多租户数据库的面向结构化数据的映射表索引结构及索引维护tglt.yynwfpxhxfsqce有效地支持多租户定制及隔离特征，并能提供较好 的访问性能。</p><p>本文第2节给出键值对传统索引机制在SAAS应用的问题分析，介绍基于键值对模式的多租户映射表视频信号萨嘎；第3节讨论索引更新策略；第4节给出上述算法的实验验证；第5节给出数大安慰她；第6节给出本文的结义与展望。</p><h1 id="2基于键值对模式的多租户索引模型"><a href="#2基于键值对模式的多租户索引模型" class="headerlink" title="2基于键值对模式的多租户索引模型"></a>2基于键值对模式的多租户索引模型</h1><h2 id="2-1-键值对模式介绍"><a href="#2-1-键值对模式介绍" class="headerlink" title="2.1:键值对模式介绍"></a>2.1:键值对模式介绍</h2><p>在SAAS模式下，数据库不但要提供极高的性能，还要支持租户隔离而且富于扩展性。多租户数据库要根据环境的不同，比如不同的租户、不同的工作流程、不同的服务水平协议 等提供易变性。结合国内外研究现状，本文选择了键值对存储 方式来存储业务数据。</p><p>键值对言式能提供较好的易变性，在键值对方式下，每个属性都存储在一个长而窄的关系里（如图1）。</p><p>租户根据自己业务的需要，自由定制所需数据项，租户定制信息被保存在元数据（metadata）里，租户定制的数据项经过逻辑层与存储层模式映射后，被统一保存在数据关系里（data table）.对应于租户数据可以建立传统的索引（index）,如B+树，以方便数据存取。</p><p>图1 基于键值对模式的多租户数据库</p><p>如表1所示，租户从逻辑层看到的仍然是传统关系模式的表格，但是在实际的键值对存储模式里，基于元数据信息，该关系通过模式映射机制被透明地转换到datatable(表2)中。</p><p>表2存储层的关系datatable</p><p>在键值对存储下，可以为业务数据建立全局索引，如（tenantID,tableID,columnID,value）当存取单个属性时，根据索引能直接进行操作。</p>]]></content>
    
    <summary type="html">
    
      SAAS下的多租户研究
    
    </summary>
    
    
      <category term="设计" scheme="http://www.xmidou.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="技术" scheme="http://www.xmidou.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>分布式事务处理方式总结</title>
    <link href="http://www.xmidou.com/2019/08/14/distributedTransaction/"/>
    <id>http://www.xmidou.com/2019/08/14/distributedTransaction/</id>
    <published>2019-08-14T09:30:59.000Z</published>
    <updated>2019-08-14T09:38:50.820Z</updated>
    
    <content type="html"><![CDATA[<p>在项目开发中，经常会需要处理分布式事务。例如数据库分库分表之后，原来在一个单库上的操作可能会跨越多个数据库。系统服务化拆分之后，原来的在一个系统上的操作可能会跨越多个系统。就连我们平时经常使用到的缓存(如redis、memcache等)也可能涉及分布式事务，因为缓存和数据库是两个不同的实体，如何保证数据在缓存和数据库间的一致性也是要重点考虑的。分布式事务就是指事务要处理的资源分别位于分布式系统中的不同节点之上的事务。</p><p>对于单机系统，通常我们借助数据库实现本地事务，例如下面JDBC代码实现了一个事务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Connection con = datasource.getConnection(); </span><br><span class="line">con.setAutoCommit(false); </span><br><span class="line">... 执行CRUD操作，可能会涉及到多个表 ... </span><br><span class="line">con.commit()/con.rollback()</span><br></pre></td></tr></table></figure><p>由于在分布式系统中，多个系统无法共用同一个数据库链接，所以无法简单借用上面的处理方式实现分布式事务。</p><p>下面将介绍几种本人在实际开发中使用过的处理分布式事务的方式，最后再引出分布式事务的相关理论并进行总结。</p><p><strong>避免出现分布式事务</strong></p><p>由于分布式事务比较难于处理，所以应该尽量避免分布式事务的发生。例如对于一个客户信息系统，由于注册用户数太多导致存储的数据量过大，所以对其进行分库分表存储。而客户信息模型又分为多个子模型，对应数据库中的多个表，例如客户基本信息表、客户登录账号表、客户登录密码表、客户联系方式表等等。假设登录账号表和客户基本信息表的关联关系如下所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="1_1.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>user_id和login_id分别是两个表的主键，user_id还作为login_info表的外键使两个表关联。在用户注册时会自动生成user_id和login_id的值。 user_info和login_info两个表分别采用user_id和login_id计算分库分表规则 。假设我们对每个模型分十库一百表存储，即存在user_info_00 ~ user_info_99一百个表，其中user_info_00 ~ user_info_09属于第一个库，user_info_10 ~ user_info_19属于第二个库，依次类推。</p><p>在分库分表之后，如果我们不仔细的考虑user_id和login_id的生成规则(例如随意生成一个数字字符串或简单使用递增sequence)，就可能导致同一个用户的user_info信息和login_info信息被存储到两个不同的库，这就会导致分布式事务发生。</p><p>面对这种问题，最好的解决思路就是考虑如何避免分布式事务的发生。只要想办法让跟一个用户相关的所有模型数据全部存入到一个库中，就可以避免分布式事务了。由于每个模型数据的分库分表路由规则又是由各个表的主键id决定的(例如user_id、login_id)，所以只要对各个表的主键生成规则进行定制，就可以保证一个用户的所有模型数据全部存到同一个库。假设有下面的id生成规则：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="1_2.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><ul><li>开始的两位是标识模型位，例如user_id以01开头，login_id以02开头。</li><li>接下来的11位是sequence递增序列号，如果想要更多的ID可以扩大这部分的位数，但对于存储用户信息而言，11位的长度足够。</li><li>接下来是分库分表位，如果每个模型的分库分表算法都相同，那么只要保证每个模型的主键ID的分库分表位都相同，就能保证一个用户的所有模型数据都会存到同一个库中。</li><li>最后一位是id校验位，这一位根据前面15位的内容生成，方便对一个id进行校验。</li></ul><p>根据这个思想，我们可以在用户注册的时候先生成user_id，user_id的分库分表位可以随机生成。然后在为其它模型生成主键id时(例如login_id)，必须让这个模型的主键id的分库分表位与user_id的分库分表位相同。另外一点也要注意，一个表的查询条件不一定只有主键id一个，如果有其它查询条件列，那就要保证那一列的生成规则也要包含相同的分库分表位，否则就不能使用该列进行查询。</p><p>通过这种方式，就可以保证一个用户的所有模型数据全部存储到同一个库中，有效的避免分布式事务的发生。</p><p><strong>事务补偿</strong></p><p>通常情况下，应对高并发的一个主要手段就是增加分布式缓存(如redis)以提高查询性能。增加分布式缓存后系统查询数据的流程如下图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="1_3.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>即先尝试从缓存中查询数据，如果缓存命中就直接返回结果，否则尝试从DB中查询数据。如果查询DB命中则将数据补充到缓存，以备下次查询时可以命中缓存。</p><p>而在更新数据时，通常是先更新DB中的数据，DB写入成功后再更新缓存中的数据。那么就有一个问题， <strong>如何保证缓存和DB间数据的一致性？</strong> 由于缓存和DB是两个不同的实体，写入DB成功后再去更新缓存，如果缓存更新失败(例如网络抖动造成短暂的缓存不可用)就会造成缓存和DB的不一致。此时按照上图的查询逻辑，先查缓存就会查询到“脏”的数据，就会严重影响业务。这也是一个典型的分布式事务问题——缓存和DB要嘛同时更新成功，要嘛同时更新失败。解决这个问题的一个较好方式就是事务补偿。</p><p>我们可以在DB中创建一张事务补偿表transaction_log，transaction_log表可以和业务数据在一个库中，也可以在不同的库。在更新数据前，先将要更新的模型数据记录到transaction_log中。例如我们更新user_info表中的数据，就将userId记录到transaction_log中。</p><p>transaction_log记录成功后，再去更新业务数据表user_info中的内容，最后更新缓存中的userInfo数据。缓存更新成功后，就可以删除transaction_log表中对应的记录。</p><p>假设在更新完user_info表之后，由于网络抖动等原因导致缓存更新失败，则transaction_log表中对应的记录就会一直存在，表示这个事务没有完成的一种记录。</p><p>应用会创建一个定时任务，周期性的扫描transaction_log表中的记录(例如每隔2S扫描一次)。发现有符合条件的记录，就尝试执行补偿逻辑。例如更新用户信息时，DB中的user_info表更新成功，但缓存更新失败，定时任务发现transaction_log表中对应的记录没有删除且已经超过正常等待时间，就尝试使缓存和DB一致(可以删除缓存中对应的数据，也可以根据userId重新查询DB再补充的缓存)。补偿任务执行完成后，就可以删除transaction_log表中对应的记录。如果补偿任务执行再次失败，就保留transaction_log表中的记录，等待下个周期再次执行。</p><p>事务补偿这种方式保证的是事务的最终一致性，即如果发生意外，会存在一个时间窗口(例如2S)，在这个窗口内DB和缓存间是不一致的，但能保证最终两者的数据是一致的。至于定时任务周期的设定，要结合业务对“脏”数据的敏感程度以及系统的负载。</p><p><strong>事务型消息</strong></p><p>对于一个金融系统，假设有一个需求是用户注册成功后自动为用户创建一个账户。客户的信息维护在客户中心系统，客户的账户信息维护的账务中心系统，如果用户注册成功，必须保证客户的账户在账务系统创建成功。这显然也是一个分布式事务问题。</p><p>处理这个问题，显然也可以采用上一小节介绍的事务补偿机制来处理。但注册和开户并不要求一定是同步完成，且需要感知用户注册成功事件的系统并不只有账务系统一个(例如营销系统可能也需要感知用户注册成功的事件，给用户发优惠券)，所以使用消息机制异步通知更加合适。那么问题就变成了“如果用户注册成功，一定要保证消息发送成功”。</p><p>应对这种场景，可以使用事务型消息。但前提条件是使用的MQ中间件必须支持事务型消息，比如阿里的RocketMQ。目前市面上其它一些主流的MQ中间件都不支持事务型消息，比如Kafka和RabbitMQ都不支持。</p><p>下面的序列图是事务型消息的执行流程：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="1_4.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><ul><li>相比于普通消息，发布者发送消息后，MQ并不是马上将消息发送给订阅者，而仅仅是将消息持久化存储下来。</li><li>发送消息成功之后，发布者执行本地事务。例如我们例子中提到的用户注册。</li><li>根据本地事务执行是否成功，发布者决定对之前已经发送的消息是commit还是rollback。如果是rollback，MQ会删除之前存储的消息。假设我们这里发送commit。</li><li>MQ接收到发布者发送的commit后，才会将消息发送给订阅者。之后，就可以利用MQ的消息可靠传输特性促使订阅者完成剩余事务操作，例如上面例子中提到的开户操作。</li></ul><p>细心的小伙伴会发现，如果在上图中的第5步发生问题导致发送commit失败，不还是会导致消息发布者和消息订阅者间事务的不一致吗？为了防止这种情况的发生，增加MQ超时回调机制。</p><p>下面的序列图是事务型消息commit失败时的执行流程：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="1_5.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>当MQ长时间收不到发布者的commit/rollback通知时，MQ会回调发布者应用询问本地事务是否执行成功，是commit还是rollback之前的消息。发布者需要提供对应的callback，在callback中判断本地事务是否执行成功。</p><p><strong>TCC两阶段提交</strong></p><p>在某些场景下，一个分布式事务可能会涉及到多个参与者，且每个参与者需要根据自己当时的状态对事务进行响应。</p><p>假设这样一个场景，一个电商网站可以允许用户在支付时选择多种支付方式。例如总共需要支付100元钱，用户可以选择积分支付10元，账户余额支付90元。用户的积分由营销系统负责，账户余额由账务系统负责，订单的状态管理由订单系统负责。</p><ul><li>首先，要先确保事务的各个参与者满足条件才能执行事务。例如积分系统要确保用户的积分超过10元钱，账务系统要确保用户的账户余额大于90元钱才能发起这次交易。</li><li>其次，就是要满足事务的原子性。这里的用户积分、用户余额、订单状态，要嘛全部处理成功，要嘛全部保持不变。</li></ul><p>应对这种分布式事务场景，可以采用TCC两阶段提交的方式进行处理。</p><p>TCC将整个事务分成两个阶段——try和commit/cancel。TCC整个流程具有三种角色——事务发起者、事务参与者、事务协调者。以上面的订单支付为例，采用TCC实现处理事务的流程如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="1_6.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><ul><li>第一阶段try，订单系统分别调用promotion和account两个系统，询问该用户是否有足够的积分和账户余额。为了防止资源争抢，在这个阶段会对资源进行锁定，即营销系统会锁住用户的10元积分，账务系统会锁住用户的90元账户余额。</li><li>如果在try阶段有任何一个参与者处理失败(例如用户积分不够10元或者用户的余额不够90元)，则事务发起方(订单系统)会通知事务协调组件，后者会通知所有的事务参与者cancel在try阶段锁定的资源。</li><li>如果在try阶段所有的参与者都处理成功，则事务发起方通知协调者commit这个事务，协调者会通知所有的参与者完成事务的commit。这时系统会完成真正的余额和积分扣减。2.2步是假设订单系统也要更新订单的状态。</li></ul><p>但仅是这样处理还是有一致性问题，例如在第二阶段commit时如果发生宕机、网络抖动等异常情况，就可能导致事务处于“非最终一致”状态(参与者只执行了try阶段，没有执行第二阶段。或部分参与者第二阶段commit成功，部分参与者commit失败)。为了应对这种情况，需要增加事务日志，以便发生异常时回复事务。</p><p>可以利用DB这种可靠存储来记录事务日志。日志中应包含事务执行过程中的上下文、事务执行状态、事务的参与者等信息。事务日志可以由事务发起发负责记录，也可以交由事务协调方进行记录。</p><p>事务日志可以由主事务记录日志和从事务记录日志组成：</p><ul><li><strong>主事务记录日志</strong> 用于记录事务发起方信息以及事务执行的整体状态。</li><li><strong>从事务记录日志</strong> 用于记录所有的事务参与者信息，以及每个参与者所属的从事务的执行状态。与主事务记录日志是一对多的关系。</li></ul><p>有了事务日志后，就可以周期性的不断扫描事务日志，找到异常中断的事务。根据事务日志中记录的信息，推动剩余的参与者commit或者cancel，以便使整个分布式事务达到“最终一致性”。</p><p>下面是commit阶段发生异常时的事务补偿逻辑：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="1_7.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>TCC两阶段提交的实现需要注意如下事项：</p><ol><li>事务中的任何一个参与者都要确保在try阶段操作成功，在第二阶段就一定能commit成功。</li><li>参与者在实现commit和cancel接口时要考虑幂等，对重复的commit/cancel请求要能够正确处理。</li><li>业务上要考虑对两阶段中间状态(一阶段已完成，二阶段未开始)的处理。一般可以通过一些特殊文案，比如显示当前被冻结的账户余额。</li><li>对于状态型数据，当多个事务共同操作同一个资源时，要确保资源隔离。例如账户余额，确保不同的事务操作的金额是隔离的，彼此互不影响。</li><li>由于网络丢包、乱序等因素的影响，可能会导致参与者接收到一阶段try请求后，永远收不到commit/cancel请求，导致参与者的资源一直被锁定，永远不会被释放，这种情况叫做事务悬挂。为了防止事务悬挂的发生，可以在第一阶段try成功后，指定一个最大等待时间。超过这个最大等待时间就自动释放被锁定的资源。</li></ol><p><strong>总结</strong></p><p>传统的单机事务应满足A(原子性)、C(一致性)、I(隔离型)、D(持久性)四个特性，属于刚性事务。由于分布式系统具有多个节点的特点，要求完全满足ACID这四个规范会非常的困难。所以就诞生了柔性事务BASE理论(Basic availability、Soft state、Eventual consistency)。</p><p>相比于单机事务，分布式事务在A和D上仍能够严格保证，但在C和I上就要有一定程度的限制放宽(允许看到中间状态数据、最终一致性)。</p>]]></content>
    
    <summary type="html">
    
      分布式事务处理方式总结
    
    </summary>
    
    
      <category term="设计" scheme="http://www.xmidou.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="开发" scheme="http://www.xmidou.com/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>非结构化数据存储在容器中的持久化</title>
    <link href="http://www.xmidou.com/2019/08/14/cloudStorgeDataPersistenceForContainer/"/>
    <id>http://www.xmidou.com/2019/08/14/cloudStorgeDataPersistenceForContainer/</id>
    <published>2019-08-14T08:06:14.000Z</published>
    <updated>2019-08-14T08:08:30.303Z</updated>
    
    <content type="html"><![CDATA[<p>在容器化应用程序设计中，每个容器间彼此隔离，独立扩展，并可作为处理某项大型网络应用的组件。有别于以往处理整个应用程序，大型的容器化应用程序可由数百个（甚至上千个）相关容器组合而成。这些应用程序支持敏捷设计、开发和部署方式。它们可以在生产环境中轻松扩展，非常适合于分布式、甚至基于云的混合式基础架构。</p><p>IT领域，变革的速度令人瞠舌。快速增长的数据，云计算规模的处理，以及的物联网设备正在推动我们向着更高效、可靠和可扩展的方向发展。传统的应用架构已日趋极限，我们正试图努力开发部署的新方案。所幸的是，最被看好的容器化技术——这项据称能够解决许多问题的技术（如果不能算是全部的话）——正成为应对上述难题的妙药良方。</p><p>在容器化应用程序设计中，每个容器间彼此隔离，独立扩展，并可作为处理某项大型网络应用的组件。有别于以往处理整个应用程序，大型的容器化应用程序可由数百个（甚至上千个）相关容器组合而成。这些应用程序支持敏捷设计、开发和部署方式。它们可以在生产环境中轻松扩展，非常适合于分布式、甚至基于云的混合式基础架构。</p><p>遗憾的是，容器在最初设计中并非用于实现全堆栈应用程序，亦不适合需要长期储存数据的应用。容器的设计初衷是可以轻易地大规模创建、部署微服务的应用层，并将微服务视为一种高度敏捷的中间件，在概念上无需持久的存储数据。</p><p>持之以恒</p><p>由于容器方式具有很强的灵活性、易于扩展、高效性，并面向云计算，在许多情况下这都是一种经济的部署模式，因此现在人们希望将其应用范围扩展到微服务之外。容器架构提供了更好的方式来构建现代化的应用程序，我们看到许多商业软件和系统供应商在内部开发中转向容器形式，甚至将其广泛部署，而且通常在上层保持对最终用户和IT管理人员的透明。大多数名列财富100强的企业已经开始以容器形式进行生产环境的第三方IT应用托管，尤其在内部应用、融合架构和专用的基础架构领域。</p><p>你或许会看到大型的、容器化的数据库，甚至存储系统的出现。然而，设计企业级的、长期存储数据的应用程序仍是不小的挑战，容器可能在分布式和混合基础架构中来回迁移。而数据需要控制、保护、受到管制和监督，所以很多时候持续数据存储需要更像是锚点那样，容器在这方面着实面临着短板。</p><p>容器架构使用到三种类型的存储：是镜像存储。这可以利用现有的共享存储进行交付，要求类似于服务器虚拟化环境中虚拟机镜像分发保护的平台架构。容器镜像的一项好处在于其存储容量相较于完整的虚拟机镜像小了许多，因为它们不会复制操作系统代码。此外，容器镜像的运行在设计之初便是固定的，因此可以更高效地存储、共享。但也因此，容器镜像无法存储动态应用程序的数据。</p><p>第二类需要存储的数据是容器的管理。当然，你同样可以借助现有存储完成这项工作。不论使用Docker、Kubernetes、Tectonic、Rancher还是其它类型的容器管理，都需要存储配置数据、日志记录等管理数据。</p><p>还有第三类存储，容器应用的存储，是挑战的。只有支持真正的微服务式编程时，容器代码可以直接写入镜像目录和文件。但是容器使用一种分层文件系统，将所有新写入的数据存储在临时虚拟层，层的容器镜像却未被修改。一旦容器消失——相比虚拟机，容器的设计寿命更短——所有的临时存储都会随之消散。</p><p>假如一个容器应用程序需要保存数据，一种方式是显示地在容器的全局命名空间内加载一个特定的系统数据卷——或在Kubernetes框架下的持久卷这样可以让容器直接方案读/写主机目录或文件系统。假如容器被关闭或重新启动，它依旧可以访问之前写入的，用于长期存放的数据。但这并不是一个简单易行的方式，需要考虑在容器之间共享数据，因此应用程序开发人员必须兼顾共享、锁定、争用和重启的问题。而且存储管理员如何甄别保护——快照、备份和灾难恢复产生的——成千上万由程序控制的海量数据。</p><p>此外，假如容器集群中的某一个容器位于另一台主机，那么存储管理员需要确保共享或分布式文件系统（例如NFS）在所有的集群主机上均保持同样的配置，甚至应用程序员可能要添加更多与I/O相关的代码，从而确保可靠的集群级别的共享。所幸的是，专家级的存储管理员会选择将现有的企业级存储（如NAS和SAN）带入这个全新的容器领域。如果他们与开发人员紧密合作，可以实际配置出高端的企业级生产环境。</p><p>不过，容器领域内的实践是让Agile DevOps具备相同的沙箱、测试与生产环境。从容器角度看，这种方式为最终用户提供动态配置，从而确保容器的移动和迁移。系统的存储配置越是静态和脆弱，容器化的好处便越是难以体现。</p><p>Docker等容器管理产品提供可插拔的卷管理。例如Flocker是开源Docker可插拔卷中的的替代品，可以通过集群智能管理、迁移数据卷及其容器。虽然Flocker的主要赞助商ClusterHQ已不复存在，但我们预计这种功能将持续发展，并在基准容器平台内变得日益本土化；Rancher Labs的“Convoy”项目正朝着这个方向发展。大多数（如果不说全部的话）传统存储供应商和云存储服务提供商为其存储阵列生成各类容器系统卷插件，这不失为在存储上持续投资的好方法。</p><p>存储即软件</p><p>相较于尝试将旧版存储强制迁移到新的容器环境中，不断增长的替代方案会引发新一波的软件定义存储（SDS）风潮来完成这项工作。SDS由一个存储操作系统和完全部署为软件层的服务构成，该服务层通常作为虚拟机呈现，不过现在其越来越多地部署为容器模式。容器化软件存储的快速发展是很容易想见得到的，以便于容器化应用程序使用存储服务。</p><p>相比在传统的生产环境中，服务器虚拟化环境通常基于大型而昂贵的主机集群，容器的托管体系架构能够轻松使用由更开放的、广泛而廉价的通用服务器组建起的私有、公有或混合云基础架构。这有些类似于Hadoop和Spark等大数据项目使用通用基础架构的优势，并且通过使用SDS和内存来讲我们从专用而昂贵的平台中释放出来。</p><p>SDS的另一项核心优势特别针对Ceph，Torus和GlusterFS等分布式容器方案，将存储以最适合的方式交付给容器集群。管理诸如GlusterFS之类的技术对传统的SAN管理员而言可谓是一项挑战，但容器化存储与身居来具有各种诸如敏捷性、可扩展性和可用性方面的优势，同时通过本地化数据存储改善应用程序性能。</p><p>简而言之，预融合和超融合容器设备使得内置本地容器存储功能（如Datera和Diamanti）变得更加简单。通过使用SDS来得到在同一平台设备格式下融合万物所需的灵活性和便捷性。虽然我们尚未有听到有企业真正在生产环境中使用融合容器托管方式，但未来的IT基础架构必将延续融合道路，同时建立更多云端服务。</p><p>当然，IT人员的工作在于判断是否为某家供应商专有的技术买单，或是转向免费的开源代码，加以投资，并封闭在该领域。假如要得到经过预先集成、验证的企业级功能和全天候的技术支持，通常需要长期选定某家供应商的开源分发或预融合的堆栈。换句话说，这不仅是选择传统的哪家供应商，更是选择供应商专有还是开源的技术，或是完全依赖自己的开发。</p><p>云端扩展的对象存储</p><p>容器化应用程序往往采取云计算架构，其体系架构要根据外部工作负载情况的变化、增长而持续扩展内部的服务。这种基于云的理念同样渗透到现代应用程序开发人员调用存储的方式。许多新的容器化应用程序是针对对象存储的I / O，而非传统的文件系统或数据块编写的。</p><p>大多数当前的容器环境在现实部署中平稳进行——当然在公有云中可谓例外，来自Hedvig、Qumulo和Scality等在线扩展对象存储恰好满足容器所需。在实施或迁移容器应用程序时，Amazon Web Services Simple Storage Service (S3)和类似的公有云已经开始将对象存储用作持久的存储层。</p><p>面向未来</p><p>我们尚未看到容器最终在数据存储方面会有怎样的表现。根据过去存储领域的发展演进经验来看，我们可能会看到“容器认知”存储的出现，其为容器配置而生，并配以适合的管理功能。就像虚拟机认知存储一样，我们应该还可以看到一项容器存储服务，可以保持数据并持续追溯——甚至在跨集群容器和跨云容器环境中。最终，我们期待看到使用服务器闪存和新兴的持续性闪存（如非易失性存储器快照）的容器认知缓存，并且和持续存储层相结合。</p><p>希望未来的容器认知存储可以兼顾到所有关键的方面，从容器清单到应用蓝图。我们同样希望在未来完成多容器环境的存储管理，可以追溯、预测和优化存储订阅，以满足持续容器运作所需。另外，存储认知的存储需要能通过简单的策略机制，随时随地地保护到所有数据、确保高可用性和灾难恢复。</p><p>以虚拟机形式呈现的服务器虚拟化花费了超过10年才替代掉企业数据中心中应用程序专用的物理服务器。现在，容器化应用程序似乎将会在一两年内替换许多完整的虚拟机应用。挑战在于我们能否为容器快速提供企业级持续性数据存储。</p>]]></content>
    
    <summary type="html">
    
      非结构化数据存储在容器中的持久化
    
    </summary>
    
    
      <category term="设计" scheme="http://www.xmidou.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="存储" scheme="http://www.xmidou.com/tags/%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>谈谈云存储性能优化</title>
    <link href="http://www.xmidou.com/2019/08/14/cloudStorgePerformance/"/>
    <id>http://www.xmidou.com/2019/08/14/cloudStorgePerformance/</id>
    <published>2019-08-14T07:24:08.000Z</published>
    <updated>2019-08-14T08:09:39.754Z</updated>
    
    <content type="html"><![CDATA[<p>公共云供应商所提供的存储服务选择有限，这就使得其优化成为一项挑战。使用下文中的这些小贴士可有助于提升性能并确保您的工作负载顺利运行。</p><p>随着企业在公共云中部署了越来越多的存储资源，每一家供应商所提供服务的运行性能可能对相关的工作负载产生意义深远的影响。诸如存储服务等级、网络连接性以及应用设计等问题都会影响应用程序的实际运行性能。</p><p>工作负载的运行取决于存储服务，所以在工作负载的运行过程中实现和保持一定的存储性能等级是非常重要的。 使用如下这五种策略可实现公共云存储服务的性能优化。</p><p>精心选择存储类型</p><p>传统企业完全控制IT资源及其运行性能，但公共云的运行方式则是截然不同的。云存储服务供应商是不会为了用户业务能够创造出的功能而改变其产品的，这样会破坏使公共云功能多样化的速度与规模。</p><p>用户不得不在有限的存储服务菜单中进行选择，而每一个服务选项都有其各自的优缺点。公共云存储服务性能优化的方法之一就是了解这些限制，并根据性能要求进行仔细选择。</p><p>例如，亚马逊网络服务(AWS)用户通常会为低延迟、高流量的频繁访问数据选择亚马逊简单存储(S3)标准，尽管其运行性能是可变的。其挑战就是以尽可能低成本选择一种存储服务，同时所提供的性能和恢复能力都是最适合用户工作负载的。如果用户已经选择了一项服务，但在实际使用中发现其不足，那么可考虑将数据迁移至另一个服务层，一个不同的存储服务或者甚至另行选择一家公共云供应商。</p><p>监控和测量有意义的指标</p><p>用户需要知道公共云存储服务何时是正常运行的，何时运行不稳定以及何时服务发生中断。监控和测量相关指标可有助于用户确定系统的可用性和了解实际的运行性能。可考虑选择云供应商所提供的本地监控服务，例如亚马逊CloudWatch、Azure Monitor和谷歌云平台(GCP)Stackdriver Monitoring。</p><p>这种监控与测量服务可简化故障诊断，并有助于工作负载架构与设计的设施改进。例如，监控报告可帮助企业用户识别网络或存储性能中存在的瓶颈。监控工具的强大之处还在于它能够推动服务配置变更，例如使用更多的存储容量或集成其他存储服务。</p><p>工作负载审查及其重新设计</p><p>许多其他企业将使用与您使用相同的存储服务，这就会导致出现意想不到的性能变化。用户无法自行更改供应商的公共云存储服务来解决这个问题，但是他们可以通过更改他们工作负载的架构和设计来实现性能优化。</p><p>例如，如果用户在一个公共云区域中移动或部署工作负载，而工作负载的存储资源则位于另一个不同的区域，那么其性能可能会有所下降。为了解决这个问题，架构师可以将原始存储库复制到位于新区域中的副本存储资源，并将工作负载重新指向复制的存储资源。架构师也可以使用缓存方法。例如，对于敏感的数据库工作负载，可以使用诸如亚马逊ElastiCache或Azure Redis Cache的服务来提供高性能、内存内的云缓存功能。</p><p>开发人员应当评估应用程序的存储敏感度并考虑设计变更。例如，异步通信可能比同步通信更容易产生延迟和中断，而异步操作则会带来更大的数据丢失风险。最终，一个依赖于公共云存储服务的工作负载必须适应该存储的行为。</p><p>评估混合云存储机会</p><p>当本地工作负载无法克服公共云存储服务的性能限制时，使用特制工具可加速数据中心与云端的连接性。</p><p>这种混合云实施的一个示例就是AWS Storage Gateway，企业通常将其作为一个设施部署在他们自己的数据中心内。网关的工作模式主要有三种：文件、卷标和磁带。作为一个文件网关，本地工作负载会发送文件对象至亚马逊S3。企业主要使用这种模式进行备份和灾难恢复工作。作为卷标网关，本地工作负载会访问云中的iSCSI卷标。企业用户会使用卷标模式进行快照和其他备份。此外，卷标模式还支持本地缓存功能，所以频繁访问的数据也可以保存在本地存储器中，而其他数据保存在云端。在磁带网关模式下，用户可以将现有基于磁带的备份系统作为一个虚拟磁带库扩展至云。</p><p>增强连接性</p><p>性能问题不一定源于云存储服务供应商或服务本身，但是这个问题可以通过互联网连接的限制予以解决。公共网络常常伴随着意外拥塞和中断的风险，这两种风险都会造成存储流量中断并降低性能。</p><p>一个选择就是增加WAN到公共互联网的带宽。为了实现这一点，可用高带宽的WAN链接(例如万兆以太网，GbE)或更高速的网络链接替代现有的WAN链接。作为替代方案，可使用多个低带宽WAN链接的组合(例如两个或多个千兆链接)。多个链路还可提升网络的可用性——如果有一个链路发生故障，那么另一个链路可以保持连接。</p><p>企业还可以在他们的数据中心和公共云存储服务之间使用专用网络连接服务。这些服务的示例包括AWS Direct Connect、Azure ExpressRoute 和谷歌Cloud Interconnect。一个专用的高性能连接可以降低公共互联网的可变性，同时改善有限WAN带宽的使用。</p>]]></content>
    
    <summary type="html">
    
      谈谈云存储性能优化
    
    </summary>
    
    
      <category term="设计" scheme="http://www.xmidou.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="存储" scheme="http://www.xmidou.com/tags/%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>谈谈云存储架构</title>
    <link href="http://www.xmidou.com/2019/08/14/cloudStorgeFamework/"/>
    <id>http://www.xmidou.com/2019/08/14/cloudStorgeFamework/</id>
    <published>2019-08-14T07:17:49.000Z</published>
    <updated>2019-08-14T07:20:24.582Z</updated>
    
    <content type="html"><![CDATA[<p>在企业内部服务平台中，首先需要实现云存储功能，以提供各部门用户数据的存储功能，方便用户获取各自需要的数据，包括GPS、视频、语音等模拟和数字信息等数据。</p><p>在企业内部服务平台中，首先需要实现云存储功能，以提供各部门用户数据的存储功能，方便用户获取各自需要的数据，包括GPS、视频、语音等模拟和数字信息等数据。其次需要接入消息与通讯系统，如350兆集群呼叫，手机、移动终端、 固话，及Mail，MSN、QQ、微信等即时通讯(IM Instant Messenger)，以实现动态消息推送和位置服务。第三是实现业务功能开发与运行，如在线播放云存储中的视频监控图像、照片及相关资料，以及各业务子系统的运行，为一线用户和领导提供分析和指挥决策依据。为此需要相应的基础软硬件资源，如服务器、存储和网络设备、操作系统和数据库等商用软件。企业云架构示意见图1。云存储、通讯及消息、业务运行系统和软硬件基础资源这四个基本要素构成了一个面向终端用户的操作系统平台，或称为企业云，其能够通过各种浏览器或手机App及PC机随时访问，满足用户在任意时刻、任意地点查看信息的需求。</p><p>作为企业云的核心是存储和计算，其它都构建在存储和计算之上的基础服务和用户运用。企业云主要涉及数据存储架构和用户访问优化等两方面的技术，下面分别予以简述。</p><p>云存储架构设计</p><p>云存储主要是为了存储数据，方便用户访问，同时也是为了解决信息共享问题。在云存储建立之前，各业务部门均是自建专用系统，网络虽然相通，但由于数据分散存储在各自系统中，导致信息在业务协同时关联、互查和引用不流畅。以前各系统间的数据整合和共享主要靠交换接口标准化等SOA方式来实现[4]，对于非结构化数据几乎无法实现，且改造各子系统的工作量巨大和繁琐。</p><p>采用云存储技术就可以克服上述问题，本文采用HDFS(Hadoop Distributed File System)分布式文件系统的存储方式，原各业务信息管理系统的数据通过Sqoop工具导入，HDFS实现数据层面的共享。HDFS包括主控服务器(同时配置备用主控服务器以便在故障时接管服务)，多个数据服务器(存储节点)，前端接入终端服务消息平台及各业务子系统数据库服务器。</p><p>图2 分布式文件系统示意图</p><p>主控服务器Master负责维护整个文件系统的命名空间与路由，以提供用户使用。该分布式系统架构***的缺点是主控服务器为单点结构，一旦出现故障将造成全系统瘫痪，故在实际应用中采用HA、UCARP等容灾备份，以便在故障时接管服务。主控服务器的命名空间结构采用目录树结构，建立元数据到数据服务器的映射关系，文件之间的关系等。为了提高检索效率，可以采取元数据内存化管理方式。主控服务器通过心跳线方式轮询数据服务器(DS)，当发现有DS宕机时，对一些副本数不足的文件(块)执行复制计划，也可根据DS数量增减需要执行副本迁移任务。</p><p>数据服务器主要解决海量数据的低成本存储和快速检索，提高数据存储的安全性问题。其解决方案是将大块数据划分为小数据块，然后均匀分布到多台数据服务器上，每个数据服务器存储的文件数量就少了，对于大文件数据的处理方法是将大文件划分成多个相对较小的片段存储在多个数据服务器上，把单个数据服务器上存储的文件数降到单机能解决的规模，以此降低存储设备成本和提高效率，并通过多副本复制来提高数据安全性。</p><p>终端服务平台</p><p>企业协同作业的终端服务平台又称为“永远在线推送平台”(AOI Always Online Infrastructure)，该平台是以协同作业应用为导向，以指挥中心的“推送”技术为基础，为一线人员提供统一的消息推送服务，实现了将消息和内容实时推送到终端的全新体验。</p><p>永远在线推送平台(AOI)包括终端中间件和在线服务器，终端中间件提供各类移动和固定终端的接入以及各终端间的通信路由功能;在线服务器提供统一的永远在线连接安全认证、消息缓存服务、在线业务处理子系统。终端服务消息平台示意图如下：</p><p>其中，SIP(Session Initiation Protocol)网主要实现会话功能，这些会话可以是Internet多媒体会议、IP电话或多媒体分发，会话的参与者可以通过组播(multicast)、网状单播(unicast)或两者的混合体进行通信。</p><p>XMPP(The Extensible Messaging and Presence Protocol)网主要用于服务类实时通讯，即时消息(IM)及在线现场探测[2]。XMPP的核心是XML流传输协议，借助于XML易于解析和阅读的特性，使得XMPP的协议能够允许网络用户简便和流畅地向其他用户发送信息。</p><p>终端服务消息平台采用软交换技术(SS Software Switching)吸取了IP、ATM、IN、TDM等技术的优点，采用开放的分层体系结构，不但实现了各种通讯协议的兼容，更重要的是实现了业务系统的融合，为终端用户提供了统一的消息和内容服务接口。</p>]]></content>
    
    <summary type="html">
    
      谈谈云存储架构
    
    </summary>
    
    
      <category term="设计" scheme="http://www.xmidou.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="存储" scheme="http://www.xmidou.com/tags/%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>URL长短变换</title>
    <link href="http://www.xmidou.com/2019/07/15/changLurlToSurl/"/>
    <id>http://www.xmidou.com/2019/07/15/changLurlToSurl/</id>
    <published>2019-07-15T03:02:51.000Z</published>
    <updated>2019-07-15T10:21:09.489Z</updated>
    
    <content type="html"><![CDATA[<h1 id="将一个长URL变成短及原理分析"><a href="#将一个长URL变成短及原理分析" class="headerlink" title="将一个长URL变成短及原理分析"></a><strong>将一个长URL变成短及原理分析</strong></h1><p>短址本质上是实现了一个映射函数 f: X - Y 。而这个映射函数必须同时具有两个特点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果 x1 != x2, 则 f (x1) != f(x2);</span><br><span class="line">同样，对于每一个 y, 也能够找到唯一的一个 x 使得 f(x) = y;</span><br></pre></td></tr></table></figure><ul><li><strong>如何将长URL生成短URL</strong></li><li><strong>短地址从URL输入到页面展现到底发生了什么？</strong></li><li><strong>短链接的设计思路</strong></li><li><strong>发号器的设计思路</strong></li></ul><h2 id="如何将长URL生成短URL"><a href="#如何将长URL生成短URL" class="headerlink" title="如何将长URL生成短URL"></a><strong>如何将长URL生成短URL</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://longlonglong.url  --&gt; http://short.url</span><br></pre></td></tr></table></figure><p>短地址在实际场景中还有一些好处：</p><ul><li>较短的网址可以放在微博的限制字数里，节约网址长度、更加方便社交化传播</li><li>规避网址中的关键词、屏蔽域名、隐藏真实地址</li><li>由于存在长短网址的映射的中间层，可以更加方便URL的管理，如暴力广告等信息的屏蔽、跟踪点击量、地域分布等数据统计及挖掘工作</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://news.sina.com.cn/gov/xlxw/2019-07-15/doc-ihytcerm3703831.shtml</span><br></pre></td></tr></table></figure><p>一个比较简单的做法就是使用百度的短地址服务 <a href="http://dwz.cn/" target="_blank" rel="noopener">http://dwz.cn/</a> ，这样就可以生成如下所示的短地址，无论访问长地址还是短地址其实都是一样的可以访问到最终的真实地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://dwz.cn/g0K4oEWD</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="1_bd.png" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">有很多提供短地址服务的平台，例如：</span><br><span class="line">- 新浪：http://sina.lt/</span><br><span class="line">- 百度：http://dwz.cn/</span><br><span class="line">- 0x3：http://0x3.me/</span><br><span class="line">- MRW：http://mrw.so/</span><br><span class="line">- 谷歌：https://goo.gl/</span><br></pre></td></tr></table></figure><h2 id="短地址从URL输入到页面展现到底发生了什么？"><a href="#短地址从URL输入到页面展现到底发生了什么？" class="headerlink" title="短地址从URL输入到页面展现到底发生了什么？"></a>短地址从URL输入到页面展现到底发生了什么？</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2_dns.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>当我们在浏览器里输入<a href="https://dwz.cn/g0K4oEWD时" target="_blank" rel="noopener">https://dwz.cn/g0K4oEWD时</a></p><ul><li>DNS首先解析获得 <a href="http://dwz.cn" target="_blank" rel="noopener">http://dwz.cn</a> 的 IP 地址</li><li>当 DNS 获得 IP 地址以后（比如：180.101.212.104），会向这个地址发送 HTTP GET 请求，查询短码 g0K4oEWD</li><li><a href="http://dwz.cn.cn" target="_blank" rel="noopener">http://dwz.cn.cn</a> 服务器会通过短码 g0K4oEWD 获取对应的长 URL</li><li>请求通过 HTTP 301 转到对应的长 URL <a href="https://news.sina.com.cn/gov/xlxw/2019-07-15/doc-ihytcerm3703831.shtml" target="_blank" rel="noopener">https://news.sina.com.cn/gov/xlxw/2019-07-15/doc-ihytcerm3703831.shtml</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">301 是永久重定向，302 是临时重定向。短地址一经生成通常就不会变化，301 是符合 http 语义的，同时对服务器压力也会有一定减少。301 redirect:：301代表永久性转移(Permanently Moved)，301重定向是网页更改地址后对搜索引擎最友好的方法，只要不是暂时搬移的情况，都建议使用301来做转址。</span><br><span class="line">302 redirect:：302代表暂时性转移(Temporarily Moved )，在前些年，不少Black Hat SEO曾广泛应用这项技术作弊。各大主要搜索引擎均加强了打击力度，像Google对BMW德国网站的惩罚。即使网站客观上不是spam，也很容易被搜寻引擎误判为spam而遭到惩罚。</span><br><span class="line">服务器坚持重定向而不是立即响应用户想要查看的网页有一些有趣的原因。一个原因与搜索引擎排名有关。请参阅，如果同一页面有两个网址，比如http://www.igoro.com/和http://igoro.com/ ，搜索引擎可能会将它们视为两个不同的网站，每个网站都有较少的传入链接和因此排名较低。搜索引擎理解永久重定向（301），并将来自两个源的传入链接组合成单个排名。此外，相同内容的多个URL不支持缓存。当一段内容具有多个名称时，它可能会在缓存中多次出现。</span><br><span class="line">**URL完整格式为：协议://用户名:密码@子域名.域名.顶级域名:端口号/目录/文件名.文件后缀?参数=值#标志**</span><br></pre></td></tr></table></figure><p>从输入URL到页面加载完成的过程比较粗的可以说经历了如下阶段：</p><ol><li>在浏览器中输入URL并确认</li><li>URL解析/DNS解析查找域名IP地址</li><li>网络连接发起HTTP请求</li><li>HTTP报文传输过程</li><li>服务器接收数据</li><li>服务器响应请求/MVC</li><li>服务器返回数据</li><li>客户端接收数据</li><li>浏览器加载/渲染页面</li><li>打印绘制输出</li></ol><p>关于DNS部分需要补充的知识如下，DNS的域名解析是递归的：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="3_findDns.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>根域名服务器是用来查顶域权威服务器用的，作为全球因特网DNS体系的固定统一入口。全球13组根域名服务器中有 10 组在美国。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="4_rootDns.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>拓展阅读：DNS层面是可以进行DNS劫持的，<strong>DNS劫持又称域名劫持，是指在劫持的网络范围内拦截域名解析的请求，分析请求的域名，把审查范围以外的请求放行，否则返回假的IP地址或者什么都不做使请求失去响应，其效果就是对特定的网络不能访问或访问的是假网址。</strong></p><p>DNS劫持(DNS钓鱼攻击)十分凶猛且不容易被用户感知，曾导致巴西最大银行巴西银行近1%客户受到攻击而导致账户被盗。黑客利用宽带路由器的缺陷对用户DNS进行篡改——用户只要浏览一下黑客所掌控的WEB页面，其宽带路由器的DNS就会被黑客篡改，因为该WEB页面设有特别的恶意代码，所以可以成功躲过安全软件检测，导致大量用户被DNS钓鱼诈骗。</p><h2 id="短链接的思路"><a href="#短链接的思路" class="headerlink" title="短链接的思路"></a>短链接的思路</h2><p>短链接的实现有些人提出了压缩算法和Hash映射等等，有人也在知乎进行了讨论（<strong>下一节会提出</strong>），其实这些的方向都错了会钻到牛角尖里。</p><p>正确的思路，是做一个<strong>发号器</strong>，通过长短链接的一一映射关系进行统一的管理。每过来一个长地址，就让发号器发一个号即可，长地址和短地址的映射关系甚至可以放在mysql。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://dwz.cn/g0K4oEWD 为例，我们再简化一下，哪怕是最简单的id自增都是简单实用的，根据长地址依次生成https://dwz.cn/0 、 https://dwz.cn/1 ......</span><br></pre></td></tr></table></figure><p>短地址的生成是一个读多写少的情况，技术上可以思考更全面一些，比如：</p><ul><li>生成短链接以前使用Bloom Filter判断是否存在冲突</li><li>对总链接数做好监控，防止地址太多超过上限</li><li>防攻击做好，防止耗尽链接池初始资源</li><li>一些统计的加强</li></ul><p>发号器的实现最核心的方式之一是<strong>多进制</strong>的使用。</p><p>我们上篇文章介绍的UUID，以及之前介绍过的Snowflake雪花算法，还有百度开源的基于Snowflake的Uidgenerator、美团开源的leaf都是发号器。</p><p>目前业界使用Apache亮哥的sharding-jdbc，一般都会采取其内置的Snowflake算法，关于二次改造我这里列举一个58沈剑在《架构师之路》系列中提出的例子。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="5_launchar.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="发号器的设计思路"><a href="#发号器的设计思路" class="headerlink" title="发号器的设计思路"></a>发号器的设计思路</h2><p>在设计发号器之初，必须要做的是评估发号器的容量。</p><p>这是一种设置 id 自增，一个 10进制 id 对应一个 62进制的数值，1对1，也就不会出现重复的情况。这个利用的就是低进制转化为高进制时，字符数会减少的特性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">进制转换工具 http://tool.lu/hexconvert/</span><br></pre></td></tr></table></figure><p>以新浪微博微为例，如果新浪微博日活用户量是1亿，如果每个人每天发0.1条带URL的新浪微博，那么转换为短地址我们要考虑总量和读写的压力，微博场景下是读多写少的。</p><p>对于写来说，每天产生一千万微博数量，那么每年大概是0.1亿*365=36.5亿，如果采用based62上生成6位， 短址的长度一般设为 6 位，而每一位是由 [a - z, A - Z, 0 - 9] 总共 62 个字母组成的，所以 6 位的话，总共会有 62^6 ~= 568亿种组合，够用15年。在google URL shortener 服务中，短址长度为 5，大概有9亿多种组合。</p><p>如果按照秒来算的话，一天86400秒，每天写的平均QPS大概在 0.1亿 /86400秒=115QPS，我们可以把峰值设置为500QPS。所以500QPS就是发号器设置的QPS写峰值，也是这个系统设计之初需要达到的QPS。</p><p>对于读来说，读比写要多，比如一亿人一天只有十分之一的人发微博，但是每个人都会点击10条别人的微博。点击这个URL的峰值我们可以初步计算为 1亿*10/86400 = 11万5000 QPS。这么大的QPS最好使用分布式缓存Redis去存储。</p><p>对于存储来说，如果一个URL是100bytes（字节），那么每天产生一千万的微博总量是 100bytes <em> 1千万 / 1024/1024/1024 = 0.93G，每年产生0.93G</em>365=339G=0.3T。所以准备1T的硬盘，没有特殊情况，可以用3年。</p><p>在stackoverflow上也有老外提出了自增序列算法的解答（ <a href="https://stackoverflow.com/questions/742013/how-do-i-create-a-url-shortener" target="_blank" rel="noopener">https://stackoverflow.com/questions/742013/how-do-i-create-a-url-shortener</a> ）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="6_launchar2.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>于每一个长地址，我们可以根据它的ID，得到一个6位的 62 进制数，这个6位的 62 进制数就是我们的短址:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  public ArrayList&lt;Integer&gt; base62(int id) &#123;</span><br><span class="line">ArrayList&lt;Integer&gt; value = new ArrayList&lt;Integer&gt;();</span><br><span class="line">while (id &gt; 0) &#123;</span><br><span class="line">int remainder = id % 62;</span><br><span class="line">value.add(remainder);</span><br><span class="line">id = id / 62;</span><br><span class="line">&#125;</span><br><span class="line">return value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举个例子，对于 ID = 138，通过 base62(138), 我们得到 value = [14, 2]。根据上面的对应规则表，我们可以得到其对应的短址为：aaaabn</p><p>通过短址找到所对应的长地址，方法也很简单，就是把62进制数转成10进制数即可，这样我们就可以得到长地址的ID了。</p><p>How to resolve a shortened URL to the initial ID</p><p>The reverse is even easier.You just do a reverse lookup in your alphabet.</p><p>1、e9a~62~ will be resolved to “4th,61st,and 0th letter in the alphabet”.<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="7.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br>        2、Now find your database-record with WHERE id = 19158</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  public static int base10(ArrayList&lt;Integer&gt; base62) &#123;</span><br><span class="line">    //make sure the size of base62 is 6</span><br><span class="line">    for (int i = 1; i &lt;= 6 - base62.size(); i++) &#123;</span><br><span class="line">        base62.add(0, 0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">int id = 0;</span><br><span class="line">int size = base62.size();</span><br><span class="line">for (int i = 0; i &lt; size; i++) &#123;</span><br><span class="line">int value = base62.get(i);</span><br><span class="line">id += (int) (value * Math.pow(62, size - i - 1));</span><br><span class="line">&#125;</span><br><span class="line">return id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="8.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="MD5进制算法"><a href="#MD5进制算法" class="headerlink" title="MD5进制算法"></a>MD5进制算法</h3><h4 id="算法一"><a href="#算法一" class="headerlink" title="算法一"></a>算法一</h4><p><strong>自增序列算法</strong> 也叫永不重复算法</p><p>设置 id 自增，一个 10进制 id 对应一个 62进制的数值，1对1，也就不会出现重复的情况。这个利用的就是低进制转化为高进制时，字符数会减少的特性。</p><p>如下图：十进制 10000，对应不同进制的字符表示。 </p><p><img src="9.png" alt></p><p>短址的长度一般设为 6 位，而每一位是由 <code>[a - z, A - Z, 0 - 9]</code> 总共 62 个字母组成的，所以 6 位的话，总共会有 62^6 ~= 568亿种组合，基本上够用了。</p><h4 id="算法二"><a href="#算法二" class="headerlink" title="算法二"></a>算法二</h4><ol><li>将长网址 <code>md5</code> 生成 32 位签名串,分为 4 段, 每段 8 个字节</li><li>对这四段循环处理, 取 8 个字节, 将他看成 16 进制串与 0x3fffffff(30位1) 与操作, 即超过 30 位的忽略处理</li><li>这 30 位分成 6 段, 每 5 位的数字作为字母表的索引取得特定字符, 依次进行获得 6 位字符串</li><li>总的 <code>md5</code> 串可以获得 4 个 6 位串,取里面的任意一个就可作为这个长 url 的短 url 地址</li></ol><p>这种算法,虽然会生成4个,但是仍然存在重复几率;</p><h4 id="两种算法对比"><a href="#两种算法对比" class="headerlink" title="两种算法对比"></a>两种算法对比</h4><p>第一种算法的好处就是简单好理解，永不重复。但是短码的长度不固定，随着 id 变大从一位长度开始递增。如果非要让短码长度固定也可以就是让 id 从指定的数字开始递增就可以了。百度短网址用的这种算法。上文说的开源短网址项目 <code>YOURLS</code> 也是采用了这种算法。<a href="https://github.com/YOURLS/YOURLS/blob/master/includes/functions.php" target="_blank" rel="noopener">源码学习</a></p><p>第二种算法，存在碰撞（重复）的可能性，虽然几率很小。短码位数是比较固定的。不会从一位长度递增到多位的。据说微博使用的这种算法。</p><p>我使用的算法一。有一个不太好的地方就是出现的短码是有序的，可能会不安全。我的处理方式是构造 62进制的字母不要按顺序排列。因为想实现自定义短码的功能，我又对算法一进行了优化，下文会介绍。</p><h4 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h4><p><strong>自增序列算法流程图</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="10.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>据说微博使用的这种算法：</p><ul><li>将长网址 md5 生成 32 位签名串,分为 4 段, 每段 8 个字节</li><li>对这四段循环处理, 取 8 个字节, 将他看成 16 进制串与 0x3fffffff(30位1) 与操作, 即超过 30 位的忽略处理</li><li>这 30 位分成 6 段, 每 5 位的数字作为字母表的索引取得特定字符, 依次进行获得 6 位字符串</li><li>总的 md5 串可以获得 4 个 6 位串,取里面的任意一个就可作为这个长 url 的短 url 地址</li></ul><p>这种算法存在碰撞（重复）的可能性，短码位数固定，生成之前需要进行防碰撞的检测</p><p><strong>自增序列算法 + 用户自定义短码 流程图</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="11.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p><strong>实现自定义短码</strong></p><p>数据库增加一个类型 type 字段，用来标记短码是用户自定义生成的，还是系统自动生成的。<br>如果有用户自定义过短码，把它的类型标记自定义。每次根据 id 计算短码的时候，如果发现对应的短码被占用了，就从类型为自定义的记录里选取一条记录，用它的 id 去计算短码。<br>这样既可以区分哪些长连接是用户自己定义还是系统自动生成的，还可以不浪费被自定义短码占用的 id;</p><p>保留了 1 到 2 位的 短码，从三位的短码开始生成的。就像域名的保留域名一样，好的要自己预留;</p><table><thead><tr><th>位数</th><th>个数</th><th>区间</th></tr></thead><tbody><tr><td>1位</td><td>62</td><td>0 - 61</td></tr><tr><td>2位</td><td>3844</td><td>62 - 3843</td></tr><tr><td>3位</td><td>约 23万</td><td>3844 - 238327</td></tr><tr><td>4位</td><td>约 1400万</td><td>238328 - 14776335</td></tr><tr><td>5位</td><td>约 9.1亿</td><td>14776336 - 916132831</td></tr><tr><td>6位</td><td>约 568亿</td><td>916132832 - 56800235583</td></tr></tbody></table><p><strong>数据表设计</strong></p><p>​    links 表</p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>id</td><td>link_id</td></tr><tr><td>url</td><td>长连接</td></tr><tr><td>keyword</td><td>短链接码</td></tr><tr><td>type</td><td>系统: “system” 自定义: “custom”</td></tr><tr><td>insert_at</td><td>插入时间</td></tr><tr><td>updated_at</td><td>更新时间</td></tr></tbody></table><p><strong>后期功能扩展</strong></p><p>统计：点击量、访问的 ip 地域、用户使用的设备</p><p>管理后台：删除、数据量</p><p>登录：权限管理</p><p>设置密码：输入密码才可以继续访问</p>]]></content>
    
    <summary type="html">
    
      将一个长URL变成短URL及原理
    
    </summary>
    
    
      <category term="设计" scheme="http://www.xmidou.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="开发" scheme="http://www.xmidou.com/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>本地文件检索设计</title>
    <link href="http://www.xmidou.com/2019/05/23/design-searchfile/"/>
    <id>http://www.xmidou.com/2019/05/23/design-searchfile/</id>
    <published>2019-05-23T10:34:16.000Z</published>
    <updated>2019-05-24T01:57:15.571Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="一-操作系统类型"><a href="#一-操作系统类型" class="headerlink" title="(一)操作系统类型"></a>(一)操作系统类型</h2><p>文件的检索功能需要包含:</p><ul><li><p>windows操作系统</p></li><li><p>liunx操作系统</p></li></ul><h2 id="二-需求描述"><a href="#二-需求描述" class="headerlink" title="(二)需求描述"></a>(二)需求描述</h2><p>要求：</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 提供java的SDK包，以maven的方式引入到业务系统中使用。</span><br><span class="line"></span><br><span class="line">- 调用查询的接口</span><br><span class="line"></span><br><span class="line">- 指定路径下的所有子目录的检索（如：D:\test或/root/test）</span><br></pre></td></tr></table></figure></li></ul><p>检索条件：</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 文件名搜索</span><br><span class="line"></span><br><span class="line">- 文件内容搜索</span><br></pre></td></tr></table></figure></li></ul><p>检索范围：</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- 指定文件大小</span><br><span class="line"></span><br><span class="line">- 指定文件扩展名</span><br><span class="line"></span><br><span class="line">- 指定最后更新时间</span><br><span class="line"></span><br><span class="line">- 支持全文及文件件名的模糊搜索</span><br></pre></td></tr></table></figure></li></ul><p>实际应用的场景：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">每天文件的生成的数量为800个左右，单个文件大小为200K-300K，极少情况个别文件大小在100M-500M;</span><br></pre></td></tr></table></figure><p>文件格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doc、docx、xml、txt、pdf、jpg、png</span><br></pre></td></tr></table></figure><p>特殊约定：</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- pdf、doc、docx等内嵌图片的内容无法支持内容的检索；</span><br><span class="line"></span><br><span class="line">- jpg、png等图片类文件无法支持内容检索；</span><br><span class="line"></span><br><span class="line">- 视频文件无法支持内容检索；</span><br><span class="line"></span><br><span class="line">- 音频文件无法支持内容检索；</span><br></pre></td></tr></table></figure></li></ul><h2 id="依赖工具"><a href="#依赖工具" class="headerlink" title="依赖工具"></a>依赖工具</h2><p>1、liunx依赖系统自有带的命令行进行文件检索(find、grep、locate)</p><p>2、windws操作系统利用第三方搜索工具：everything-SDK-windows</p><h2 id="三-web微服务"><a href="#三-web微服务" class="headerlink" title="(三)web微服务"></a>(三)web微服务</h2><p>客户端SDK和服务器通过http方式交互；</p><p>客户端：</p><p>提供一个客户端的SDK，并定义搜索接口，指定传入参数：</p><p>1、检索路径（必填）</p><p>2、文件名（文件名和文件内容选填其一）</p><p>3、文件内容（文件名和文件内容选填其一）</p><p>4、指定文件大小（选填）</p><p>5、指定文件扩展名（选填）</p><p>6、指定最近多少时间内更新的文件（选填）</p><p>服务端：</p><p>创建spring boot web程序，包装http接口，服务器调用：</p><p>windows操作系统：</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过everything-sdk检索本地磁盘，返回文件路径和文件名列表</span><br></pre></td></tr></table></figure></li></ul><p>liunx操作系统：</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">执行shell命令(find、grep、locate)检索本地磁盘，返回文件路径和文件名列表</span><br></pre></td></tr></table></figure></li></ul><p>服务拓朴图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="design-file-search-1.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>结语：</p><p>客户端+服务端的设计模式，主要为了解决跨服务器的远程磁盘检索的要求；</p><p>优势：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个客户端可以在多个服务器进行文件检索；</span><br></pre></td></tr></table></figure><p>缺点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">需要将服务端部署到要检索磁盘的服务器上；</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面
    
    </summary>
    
    
      <category term="设计" scheme="http://www.xmidou.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="开发" scheme="http://www.xmidou.com/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>(一)hexo学习笔记</title>
    <link href="http://www.xmidou.com/2019/05/23/hexo-use/"/>
    <id>http://www.xmidou.com/2019/05/23/hexo-use/</id>
    <published>2019-05-23T03:39:08.000Z</published>
    <updated>2019-05-23T09:40:42.185Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="hexo发布到github的坑"><a href="#hexo发布到github的坑" class="headerlink" title="hexo发布到github的坑"></a>hexo发布到github的坑</h2><p>当使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d 或者hexo deploy</span><br></pre></td></tr></table></figure><p>发布到github,如果已经绑定了自己申请的域名，将会被重置失效，</p><p>因此，在发布完后，需要重新设置域名的映射关系。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="hexo-use-1.png" alt="hexo-use-1" title>                </div>                <div class="image-caption">hexo-use-1</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="hexo-use-2.png" alt="hexo-use-2" title>                </div>                <div class="image-caption">hexo-use-2</div>            </figure><p>点击 save 保存后，又可以正常访问网站了。</p>]]></content>
    
    <summary type="html">
    
      附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面
    
    </summary>
    
    
      <category term="技术" scheme="http://www.xmidou.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="站长" scheme="http://www.xmidou.com/tags/%E7%AB%99%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>第一个博客的创建</title>
    <link href="http://www.xmidou.com/2019/05/06/first-blog/"/>
    <id>http://www.xmidou.com/2019/05/06/first-blog/</id>
    <published>2019-05-06T03:39:08.000Z</published>
    <updated>2019-05-23T09:29:57.527Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="我的第一个博客的创建"><a href="#我的第一个博客的创建" class="headerlink" title="我的第一个博客的创建"></a>我的第一个博客的创建</h1><p>一直想做一个自己的Blog，经过曲折的过程，现在终于成形了。在这里记录下创建第一个Blog的过程。</p><h2 id="一、托管的Blog策略"><a href="#一、托管的Blog策略" class="headerlink" title="一、托管的Blog策略"></a>一、托管的Blog策略</h2><p>​    github pages可以为一个注册用户提供一个主域名的的绑定功能。而且在构建网站面可以使用hexo发布到github还是比较方便了。考虑再三，还是接受了这个方便，毕竟是第一次做网站的同学，也不用考虑太多，先做起来，有经验了后面就可以再变通。</p><h3 id="1、组合方案："><a href="#1、组合方案：" class="headerlink" title="1、组合方案："></a><strong>1、组合方案：</strong></h3><p>1、github pages做为网站托管</p><p>2、hexo进行网站编排和和管理发布</p><p>3、typora工具是目前比较好的markdown语言编排工具，可以用来写文章和排版，生成的MD文件放到hexo再发布到github网站。</p><h2 id="二、hexo-github搭建免费的个人博客"><a href="#二、hexo-github搭建免费的个人博客" class="headerlink" title="二、hexo+github搭建免费的个人博客"></a>二、hexo+github搭建免费的个人博客</h2><h3 id="1、准备工具"><a href="#1、准备工具" class="headerlink" title="1、准备工具"></a>1、准备工具</h3><p>在开始一切之前，你必须已经：</p><ul><li>有一个github账号，没有的话去注册一个；</li><li>安装了node.js、npm，并了解相关基础知识；</li><li>安装了git for windows（或者其它git客户端）</li></ul><p>本文所使用的环境：</p><ul><li>Windows7-64X</li><li>node.js_12.0.1</li><li>git_1.9.2</li><li>hexo_3.8.0</li></ul><h3 id="2、搭建github博客"><a href="#2、搭建github博客" class="headerlink" title="2、搭建github博客"></a>2、搭建github博客</h3><h4 id="2-1-创建仓库"><a href="#2-1-创建仓库" class="headerlink" title="2.1 创建仓库"></a>2.1 创建仓库</h4><p>​    新建一个名为<code>你的用户名.github.io</code>的仓库，比如说，如果你的github用户名是test，那么你就新建<code>test.github.io</code>的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 <a href="http://test.github.io" target="_blank" rel="noopener">http://test.github.io</a> 了，是不是很方便？</p><p>由此可见，每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。</p><p>几个注意的地方:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 注册的邮箱一定要验证，否则不会成功；</span><br><span class="line">2. 仓库名字必须是：`username.github.io`，其中`username`是你的用户名；</span><br><span class="line">3. 仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久，我的等了半个小时才生效；</span><br></pre></td></tr></table></figure><p>创建成功后，默认会在你这个仓库里生成一些示例页面，以后你的网站所有代码都是放在这个仓库里啦。</p><h4 id="2-2-绑定域名"><a href="#2-2-绑定域名" class="headerlink" title="2.2 绑定域名"></a>2.2 绑定域名</h4><p>​    当然，你不绑定域名肯定也是可以的，就用默认的 <code>xxx.github.io</code> 来访问，如果你想更个性一点，想拥有一个属于自己的域名，那也是OK的。</p><p>首先你要注册一个域名，域名注册以前总是推荐去<code>godaddy</code>，现在觉得其实国内的阿里云也挺不错的，价格也不贵，毕竟是大公司，放心！</p><p>绑定域名分2种情况：带www和不带www的。</p><p>域名配置最常见有2种方式，CNAME和A记录，CNAME填写域名，A记录填写IP，由于不带www方式只能采用A记录，所以必须先ping一下<code>你的用户名.github.io</code>的IP，然后到你的域名DNS设置页，将A记录指向你ping出来的IP，将CNAME指向<code>你的用户名.github.io</code>，这样可以保证无论是否添加www都可以访问，如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="first-blog_1.png" alt="first-blog_1" title>                </div>                <div class="image-caption">first-blog_1</div>            </figure><p>然后到你的github项目根目录新建一个名为CNAME的文件（无后缀），里面填写你的域名，加不加www看你自己喜好，因为经测试：</p><ul><li>如果你填写的是没有www的，比如 mygit.me，那么无论是访问 <a href="http://www.mygit.me" target="_blank" rel="noopener">http://www.mygit.me</a> 还是 <a href="http://mygit.me" target="_blank" rel="noopener">http://mygit.me</a> ，都会自动跳转到 <a href="http://mygit.me" target="_blank" rel="noopener">http://mygit.me</a></li></ul><ul><li>如果你填写的是带www的，比如 <a href="http://www.mygit.me" target="_blank" rel="noopener">www.mygit.me</a> ，那么无论是访问 <a href="http://www.mygit.me" target="_blank" rel="noopener">http://www.mygit.me</a> 还是 <a href="http://mygit.me" target="_blank" rel="noopener">http://mygit.me</a> ，都会自动跳转到 <a href="http://www.mygit.me" target="_blank" rel="noopener">http://www.mygit.me</a></li></ul><ul><li>如果你填写的是其它子域名，比如 abc.mygit.me，那么访问 <a href="http://abc.mygit.me" target="_blank" rel="noopener">http://abc.mygit.me</a> 没问题，但是访问 <a href="http://mygit.me" target="_blank" rel="noopener">http://mygit.me</a> ，不会自动跳转到 <a href="http://abc.mygit.me" target="_blank" rel="noopener">http://abc.mygit.me</a></li></ul><p>另外说一句，在你绑定了新域名之后，原来的<code>你的用户名.github.io</code>并没有失效，而是会自动跳转到你的新域名。</p><h4 id="2-3-配置SSH-KEY"><a href="#2-3-配置SSH-KEY" class="headerlink" title="2.3 配置SSH KEY"></a>2.3 配置SSH KEY</h4><p>​    为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/. ssh #检查本机已存在的ssh密钥</span><br></pre></td></tr></table></figure><p>如果提示：No such file or directory 说明你是第一次使用git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮件地址&quot;</span><br></pre></td></tr></table></figure><p>然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到<code>.ssh\id_rsa.pub</code>文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="first-blog_2.png" alt="first-blog_2" title>                </div>                <div class="image-caption">first-blog_2</div>            </figure><p>将刚复制的内容粘贴到key那里，title随便填，保存。</p><h4 id="2-4-测试是否成功"><a href="#2-4-测试是否成功" class="headerlink" title="2.4 测试是否成功"></a>2.4 测试是否成功</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com # 注意邮箱地址不用改</span><br></pre></td></tr></table></figure><p>如果提示<code>Are you sure you want to continue connecting (yes/no)?</code>，输入yes，然后会看到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi liuxianan! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><p>看到这个信息说明SSH已配置成功！</p><p>此时你还需要配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;liuxianan&quot;// 你的github用户名，非昵称</span><br><span class="line">$ git config --global user.email  &quot;xxx@qq.com&quot;// 填写你的github注册邮箱</span><br></pre></td></tr></table></figure><p>具体这个配置是干嘛的我没仔细深究。</p><h3 id="3、使用hexo"><a href="#3、使用hexo" class="headerlink" title="3、使用hexo"></a>3、使用hexo</h3><h4 id="3-1-hexo简介"><a href="#3-1-hexo简介" class="headerlink" title="3.1 hexo简介"></a>3.1 hexo简介</h4><p>​    Hexo是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题。</p><p>官网： <a href="http://hexo.io" target="_blank" rel="noopener">http://hexo.io</a><br>github: <a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">https://github.com/hexojs/hexo</a></p><h4 id="3-2-hexo原理"><a href="#3-2-hexo原理" class="headerlink" title="3.2 hexo原理"></a>3.2 hexo原理</h4><p>​    由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。</p><h4 id="3-3-注意事项"><a href="#3-3-注意事项" class="headerlink" title="3.3 注意事项"></a>3.3 注意事项</h4><p>安装之前先来说几个注意事项：</p><ul><li><p>很多命令既可以用Windows的cmd来完成，也可以使用git bash来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用git bash来执行；</p></li><li><p>hexo不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，所以注意不要被误导；</p></li><li><p>hexo有2种<code>_config.yml</code>文件，一个是根目录下的全局的<code>_config.yml</code>，一个是各个<code>theme</code>下的；</p></li></ul><h4 id="3-4-安装"><a href="#3-4-安装" class="headerlink" title="3.4 安装"></a>3.4 安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo</span><br></pre></td></tr></table></figure><h4 id="3-5-初始化"><a href="#3-5-初始化" class="headerlink" title="3.5 初始化"></a>3.5 初始化</h4><p>在电脑的某个地方新建一个名为hexo的文件夹（名字可以随便取），比如我的是<code>F:\Workspaces\hexo</code>，由于这个文件夹将来就作为你存放代码的地方，所以最好不要随便放。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /f/Workspaces/hexo/</span><br><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><p>hexo会自动下载一些文件到这个目录，包括node_modules，目录结构如下图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="first-blog_3.png" alt="first-blog_3" title>                </div>                <div class="image-caption">first-blog_3</div>            </figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g # 生成</span><br><span class="line">$ hexo s # 启动服务</span><br></pre></td></tr></table></figure><p>执行以上命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github去的：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="first-blog_4.png" alt="first-blog_4" title>                </div>                <div class="image-caption">first-blog_4</div>            </figure><p><code>hexo s</code>是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为4000这个端口太常见了，解决端口冲突问题请参考这篇文章：</p><p><a href="http://blog.liuxianan.com/windows-port-bind.html" target="_blank" rel="noopener">http://blog.liuxianan.com/windows-port-bind.html</a></p><p>第一次初始化的时候hexo已经帮我们写了一篇名为 Hello World 的文章，默认的主题比较丑，打开时就是这个样子：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="first-blog_5.png" alt="first-blog_5" title>                </div>                <div class="image-caption">first-blog_5</div>            </figure><h4 id="3-6-修改主题"><a href="#3-6-修改主题" class="headerlink" title="3.6 修改主题"></a>3.6 修改主题</h4><p>既然默认主题很丑，那我们别的不做，首先来替换一个好看点的主题。这是 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">官方主题</a>。</p><p>个人比较喜欢的2个主题：<a href="https://github.com/pinggod/hexo-theme-jekyll" target="_blank" rel="noopener">hexo-theme-jekyll</a> 和 <a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">hexo-theme-yilia</a>。</p><p>首先下载这个主题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /f/Workspaces/hexo/</span><br><span class="line">$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure><p>下载后的主题都在这里：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="first-blog_6.png" alt="first-blog_6" title>                </div>                <div class="image-caption">first-blog_6</div>            </figure><p>修改<code>_config.yml</code>中的<code>theme: landscape</code>改为<code>theme: yilia</code>，然后重新执行<code>hexo g</code>来重新生成。</p><p>如果出现一些莫名其妙的问题，可以先执行<code>hexo clean</code>来清理一下public的内容，然后再来重新生成和发布。</p><h4 id="3-7-上传之前"><a href="#3-7-上传之前" class="headerlink" title="3.7 上传之前"></a>3.7 上传之前</h4><p>在上传代码到github之前，一定要记得先把你以前所有代码下载下来（虽然github有版本管理，但备份一下总是好的），因为从hexo提交代码时会把你以前的所有代码都删掉。</p><h4 id="3-8-上传到github"><a href="#3-8-上传到github" class="headerlink" title="3.8 上传到github"></a>3.8 上传到github</h4><p>果你一切都配置好了，发布上传很容易，一句<code>hexo d</code>就搞定，当然关键还是你要把所有东西配置好。</p><p>首先，<code>ssh key</code>肯定要配置好。</p><p>其次，配置<code>_config.yml</code>中有关deploy的部分：</p><p>正确写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:liuxianan/liuxianan.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>错误写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: github</span><br><span class="line">  repository: https://github.com/liuxianan/liuxianan.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>后面一种写法是hexo2.x的写法，现在已经不行了，无论是哪种写法，此时直接执行<code>hexo d</code>的话一般会报如下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Deployer not found: github 或者 Deployer not found: git</span><br></pre></td></tr></table></figure><p>原因是还需要安装一个插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>其它命令不确定，部署这个命令一定要用git bash，否则会提示<code>Permission denied (publickey).</code></p><p>打开你的git bash，输入<code>hexo d</code>就会将本次有改动的代码全部提交，没有改动的不会：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="first-blog_7.png" alt="first-blog_7" title>                </div>                <div class="image-caption">first-blog_7</div>            </figure><h4 id="3-9-保留CHANE、README-md等文件"><a href="#3-9-保留CHANE、README-md等文件" class="headerlink" title="3.9 保留CHANE、README.md等文件"></a>3.9 保留CHANE、README.md等文件</h4><p>提交之后网页上一看，发现以前其它代码都没了，此时不要慌，一些非md文件可以把他们放到source文件夹下，这里的所有文件都会原样复制（除了md文件）到public目录的：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="first-blog_8.png" alt="first-blog_8" title>                </div>                <div class="image-caption">first-blog_8</div>            </figure><p>由于hexo默认会把所有md文件都转换成html，包括README.md，所有需要每次生成之后、上传之前，手动将README.md复制到public目录，并删除README.html。</p><h4 id="3-10-常用hexo命令"><a href="#3-10-常用hexo命令" class="headerlink" title="3.10 常用hexo命令"></a>3.10 常用hexo命令</h4><p>常见命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</span><br><span class="line">hexo deploy #部署到GitHub</span><br><span class="line">hexo help  # 查看帮助</span><br><span class="line">hexo version  #查看Hexo的版本</span><br></pre></td></tr></table></figure><p>缩写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure><p>组合命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo s -g #生成并本地预览</span><br><span class="line">hexo d -g #生成并上传</span><br></pre></td></tr></table></figure><h4 id="3-11-config-yml"><a href="#3-11-config-yml" class="headerlink" title="3.11 _config.yml"></a>3.11 _config.yml</h4><p>这里面都是一些全局配置，每个参数的意思都比较简单明了，所以就不作详细介绍了。</p><p>需要特别注意的地方是，冒号后面必须有一个空格，否则可能会出问题。</p><h4 id="3-12-创建文章"><a href="#3-12-创建文章" class="headerlink" title="3.12 创建文章"></a>3.12 创建文章</h4><p>定位到我们的hexo根目录，执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &apos;my-first-blog&apos;</span><br></pre></td></tr></table></figure><p>hexo会帮我们在<code>_posts</code>下生成相关md文件：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="first-blog_9.png" alt="first-blog_9" title>                </div>                <div class="image-caption">first-blog_9</div>            </figure><p>我们只需要打开这个文件就可以开始写博客了，默认生成如下内容：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="first-blog_10.png" alt="first-blog_10" title>                </div>                <div class="image-caption">first-blog_10</div>            </figure><p>当然你也可以直接自己新建md文件，用这个命令的好处是帮我们自动生成了时间。</p><p>一般完整格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: postName #文章页面上的显示名称，一般是中文</span><br><span class="line">date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改</span><br><span class="line">categories: 默认分类 #分类</span><br><span class="line">tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格</span><br><span class="line">description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">以下是正文</span><br></pre></td></tr></table></figure><p>那么<code>hexo new page &#39;postName&#39;</code>命令和<code>hexo new &#39;postName&#39;</code>有什么区别呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;my-second-blog&quot;</span><br></pre></td></tr></table></figure><p>生成如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="first-blog_11.png" alt="first-blog_11" title>                </div>                <div class="image-caption">first-blog_11</div>            </figure><p>最终部署时生成：<code>hexo\public\my-second-blog\index.html</code>，但是它不会作为文章出现在博文目录。</p><h4 id="3-13-第三方文章编排的工具"><a href="#3-13-第三方文章编排的工具" class="headerlink" title="3.13 第三方文章编排的工具"></a>3.13 第三方文章编排的工具</h4><p>hexo是以markdown语法定义的文章，以md后缀名为结尾的文件，hexo将这个文件最终编辑成html页面。</p><p>本篇文章就是用markdown工具typora进行编辑的。</p><h4 id="3-14-如何让博文列表不显示全部内容"><a href="#3-14-如何让博文列表不显示全部内容" class="headerlink" title="3.14 如何让博文列表不显示全部内容"></a>3.14 如何让博文列表不显示全部内容</h4><p>默认情况下，生成的博文目录会显示全部的文章内容，如何设置文章摘要的长度呢？</p><p>答案是在合适的位置加上<code>&lt;!--more--&gt;</code>即可，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 前言</span><br><span class="line">使用github pages服务搭建博客的好处有：</span><br><span class="line"></span><br><span class="line">1. 全是静态文件，访问速度快；</span><br><span class="line">2. 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；</span><br><span class="line">3. 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；</span><br><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"></span><br><span class="line">4. 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；</span><br><span class="line">5. 博客内容可以轻松打包、转移、发布到其它平台；</span><br><span class="line">6. 等等；</span><br></pre></td></tr></table></figure><p>最终效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="first-blog_12.png" alt="first-blog_12" title>                </div>                <div class="image-caption">first-blog_12</div>            </figure>]]></content>
    
    <summary type="html">
    
      附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面
    
    </summary>
    
    
      <category term="站长" scheme="http://www.xmidou.com/tags/%E7%AB%99%E9%95%BF/"/>
    
      <category term="爱好" scheme="http://www.xmidou.com/tags/%E7%88%B1%E5%A5%BD/"/>
    
  </entry>
  
</feed>
